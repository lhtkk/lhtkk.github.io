<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>istio</title>
    <link href="/2025/05/26/istio/"/>
    <url>/2025/05/26/istio/</url>
    
    <content type="html"><![CDATA[<h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><h3 id="安装istio"><a href="#安装istio" class="headerlink" title="安装istio"></a>安装istio</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># curl -L https://istio.io/downloadIstio | sh -</span><br><span class="hljs-comment"># cd istio-1.*</span><br><span class="hljs-comment"># export PATH=$PWD/bin:$PATH</span><br>安装istio基础组件<br><span class="hljs-comment"># istioctl install --set profile=demo -y</span><br>验证是否成功<br><span class="hljs-comment"># kubectl get pods -n istio-system</span><br></code></pre></td></tr></table></figure><h3 id="对istio这个namespace自动注入"><a href="#对istio这个namespace自动注入" class="headerlink" title="对istio这个namespace自动注入"></a>对istio这个namespace自动注入</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># kubectl label namespace default istio-injection=enabled</span><br></code></pre></td></tr></table></figure><h1 id="内部访问"><a href="#内部访问" class="headerlink" title="内部访问"></a>内部访问</h1><h2 id="1-创建两个deploy-分别让他们指向-c1-和-c2"><a href="#1-创建两个deploy-分别让他们指向-c1-和-c2" class="headerlink" title="1.创建两个deploy 分别让他们指向 c1 和 c2"></a>1.创建两个deploy 分别让他们指向 c1 和 c2</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># cat 01.deploy.yaml </span><br>apiVersion: apps/v1<br>kind: Deployment<br>metadata:<br>  name: apps-v1<br>  namespace: istio<br>spec:<br>  replicas: 1<br>  selector:<br>    matchLabels:<br>      app: istio<br>      version: v1<br>  template:<br>    metadata:<br>      labels:<br>        app: istio<br>        version: v1<br>    spec:<br>      containers:<br>      - name: c1<br>        ports:<br>        - containerPort: 80<br>        image: 192.168.85.128/nb/nginx:latest <br>        <span class="hljs-built_in">command</span>: [<span class="hljs-string">&quot;/bin/sh&quot;</span>, <span class="hljs-string">&quot;-c&quot;</span>, <span class="hljs-string">&quot;echo &#x27;c1&#x27; &gt; /usr/share/nginx/html/index.html &amp;&amp; nginx -g &#x27;daemon off;&#x27;&quot;</span>]<br><br>---<br><br>apiVersion: apps/v1<br>kind: Deployment<br>metadata:<br>  name: apps-v2<br>  namespace: istio<br>spec:<br>  replicas: 1<br>  selector:<br>    matchLabels:<br>      app: istio<br>      version: v2<br>  template:<br>    metadata:<br>      labels:<br>        app: istio<br>        version: v2<br>    spec:<br>      containers:<br>      - name: c2<br>        ports:<br>        - containerPort: 80<br>        image: 192.168.85.128/nb/nginx:latest <br>        <span class="hljs-built_in">command</span>: [<span class="hljs-string">&quot;/bin/sh&quot;</span>, <span class="hljs-string">&quot;-c&quot;</span>, <span class="hljs-string">&quot;echo &#x27;c2&#x27; &gt; /usr/share/nginx/html/index.html &amp;&amp; nginx -g &#x27;daemon off;&#x27;&quot;</span>]<br><br></code></pre></td></tr></table></figure><h2 id="2-定义一个svc让能负载到这两个deploy"><a href="#2-定义一个svc让能负载到这两个deploy" class="headerlink" title="2. 定义一个svc让能负载到这两个deploy"></a>2. 定义一个svc让能负载到这两个deploy</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># cat 02.svc.yaml</span><br>apiVersion: v1<br>kind: Service<br>metadata:<br>  name: apps-svc-all<br>  namespace: istio<br>spec:<br>  selector:<br>    <span class="hljs-comment">#关联两个版本</span><br>    app: istio <br>  ports:<br>  - protocol: TCP<br>    port: 80<br>    targetPort: 80<br>    name: http<br><br></code></pre></td></tr></table></figure><h2 id="3-定义一个组"><a href="#3-定义一个组" class="headerlink" title="3.定义一个组"></a>3.定义一个组</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># cat 03.rule.yaml</span><br>apiVersion: networking.istio.io/v1beta1<br>kind: DestinationRule<br>metadata:<br>  name: rule<br>  namespace: istio<br>spec:<br>  host: apps-svc-all   <span class="hljs-comment">#匹配svc的name</span><br>  subsets:<br>  - name: v1<br>    labels:<br>      version: v1     <span class="hljs-comment">#匹配deploy下面的pod的标签 分成v1，v2两个组</span><br>  - name: v2<br>    labels:<br>      version: v2<br></code></pre></td></tr></table></figure><h2 id="4-给两个实例分权重"><a href="#4-给两个实例分权重" class="headerlink" title="4.给两个实例分权重"></a>4.给两个实例分权重</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># cat 04.vs.yaml</span><br>apiVersion: networking.istio.io/v1beta1<br>kind: VirtualService<br>metadata:<br>  name: vs<br>  namespace: istio<br>spec:<br>  hosts:<br>  - apps-svc-all   <span class="hljs-comment">#匹配svc的名字</span><br>  http:<br>  - route:<br>    - destination:<br>        host: apps-svc-all<br>        subset: v1<br>      weight: 90<br>    - destination:<br>        host: apps-svc-all<br>        subset: v2<br>      weight: 10<br></code></pre></td></tr></table></figure><h2 id="5-测试"><a href="#5-测试" class="headerlink" title="5.测试"></a>5.测试</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># kubectl exec -it apps-v1-86d85445dc-hgzpm -n istio  -- bash</span><br><span class="hljs-comment"># while true;do curl apps-svc-all &gt;&gt;a.txt;sleep 0.1s;done</span><br><span class="hljs-comment"># cat a.txt|sort|uniq -c</span><br>     55 c1<br>      5 c2<br></code></pre></td></tr></table></figure><h2 id="6-请求头划分权限-带istio的都请求v1"><a href="#6-请求头划分权限-带istio的都请求v1" class="headerlink" title="6.请求头划分权限 带istio的都请求v1"></a>6.请求头划分权限 带istio的都请求v1</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#cat 05.vs.yaml </span><br>apiVersion: networking.istio.io/v1beta1<br>kind: VirtualService<br>metadata:<br>  name: vs2<br>  namespace: istio <br>spec:<br>  hosts:<br>  - apps-svc-all<br>  http:<br>    <span class="hljs-comment"># 定义匹配规则</span><br>  - match:<br>      <span class="hljs-comment"># 基于header信息匹配将其进行路由，header信息自定义即可。</span><br>    - headers:<br>        <span class="hljs-comment"># 匹配用户名包含&quot;istio&quot;的用户，这个KEY是咱们自定义的。</span><br>        username:<br>          <span class="hljs-comment"># &quot;eaxct&quot;关键词是包含，也可以使用&quot;prefix&quot;进行前缀匹配。</span><br>          exact: istio <br>    route:<br>    - destination:<br>        host: apps-svc-all<br>        subset: v1<br>  - route: <br>    - destination:<br>        host: apps-svc-all<br>        subset: v2<br><br></code></pre></td></tr></table></figure><h1 id="外部访问"><a href="#外部访问" class="headerlink" title="外部访问"></a>外部访问</h1><h2 id="通过访问网关"><a href="#通过访问网关" class="headerlink" title="通过访问网关"></a>通过访问网关</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs bash">kubectl -n istio-system get svc --show-labels|grep ingress<br>istio-ingressgateway   NodePort    10.107.199.69    &lt;none&gt;        15021:31838/TCP,80:32590/TCP,443:32047/TCP,31400:30896/TCP,15443:31643/TCP   12d   <br>istio=ingressgateway<br>-------------------------------------------------------------<br>apiVersion: networking.istio.io/v1beta1<br>kind: Gateway<br>metadata:<br>  name: my-gateway<br>  namespace: istio<br>spec:<br>  selector:<br>    istio: ingressgateway <span class="hljs-comment">#匹配上面标签</span><br>  servers:<br>  - port:<br>      number: 80<br>      name: http<br>      protocol: HTTP<br>    hosts:<br>    - <span class="hljs-string">&quot;tian.com&quot;</span>    <span class="hljs-comment">#只允许头是tian.com的 可以写*代表所有</span><br></code></pre></td></tr></table></figure><h2 id="vs"><a href="#vs" class="headerlink" title="vs"></a>vs</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs bash">apiVersion: networking.istio.io/v1beta1<br>kind: VirtualService<br>metadata:<br>  name: vs<br>  namespace: istio<br>spec:<br>  hosts:<br>  - <span class="hljs-string">&quot;tian.com&quot;</span> <span class="hljs-comment">#只接收这个的流量</span><br>  gateways:<br>  - my-gateway <span class="hljs-comment">#匹配gw的名字</span><br>  http:<br>  - route:<br>    - destination:<br>        host: apps-svc-all<br>        subset: v1<br>      weight: 90<br>    - destination:<br>        host: apps-svc-all<br>        subset: v2<br>      weight: 10<br></code></pre></td></tr></table></figure><p>在 Istio 中，<code>VirtualService.spec.hosts</code> 指的是<strong>接收到的 HTTP 请求中的 Host 头（即域名）</strong>。</p><ul><li>如果你写了 <code>&quot;*&quot;</code>，理论上是匹配所有 Host，但在 <strong>Ingress Gateway 上，它通常不会匹配任意 Host</strong>，因为 Envoy 比较严格</li></ul><h2 id="dr"><a href="#dr" class="headerlink" title="dr"></a>dr</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs bash">apiVersion: networking.istio.io/v1beta1<br>kind: DestinationRule<br>metadata:<br>  name: rule<br>  namespace: istio<br>spec:<br>  host: apps-svc-all   <span class="hljs-comment">#匹配svc的name</span><br>  trafficPolicy:       <span class="hljs-comment">#禁用tls</span><br>   tls:<br>    mode: DISABLE<br>  subsets:<br>  - name: v1<br>    labels:<br>      version: v1     <span class="hljs-comment">#匹配deploy下面的pod的标签 分成v1，v2两个组</span><br>  - name: v2<br>    labels:<br>      version: v2<br></code></pre></td></tr></table></figure><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#kubectl -n istio-system get svc |grep ingress</span><br>istio-ingressgateway   NodePort    10.107.199.69    &lt;none&gt;        15021:31838/TCP,80:32590/TCP,443:32047/TCP,31400:30896/TCP,15443:31643/TCP   12d<br><span class="hljs-comment">#curl -H &quot;Host: tian.com&quot; 10.107.199.69 </span><br>c1 - v1<br><span class="hljs-comment"># curl -H &quot;Host: tian.com&quot; 10.107.199.69 </span><br>c1 - v2<br><br></code></pre></td></tr></table></figure><h1 id="可视化kiali"><a href="#可视化kiali" class="headerlink" title="可视化kiali"></a><a href="https://so.csdn.net/so/search?q=%E5%8F%AF%E8%A7%86%E5%8C%96&spm=1001.2101.3001.7020">可视化</a>kiali</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># cd istio-1.25.2</span><br><span class="hljs-comment"># kubectl apply -f samples/addons</span><br><span class="hljs-comment"># kubectl apply -f samples/addons/extras</span><br></code></pre></td></tr></table></figure><p>配置Kiali控制面板对外访问</p><p>查看kiali服务，发现其类型为ClusterIP，没有对外暴露端口，无法从外部访问：将类型改NodePort</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># kubectl -n istio-system get svc</span><br>kiali                  NodePort       10.99.64.99      &lt;none&gt;        20001:30021/TCP,9090:30830/TCP   <br></code></pre></td></tr></table></figure><p>访问ip:30021即可</p>]]></content>
    
    
    <categories>
      
      <category>云原生</category>
      
    </categories>
    
    
    <tags>
      
      <tag>云原生</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>loki安装和配置</title>
    <link href="/2025/05/26/%E4%BD%BF%E7%94%A8helm%E5%AE%89%E8%A3%85loki/"/>
    <url>/2025/05/26/%E4%BD%BF%E7%94%A8helm%E5%AE%89%E8%A3%85loki/</url>
    
    <content type="html"><![CDATA[<h2 id="使用helm安装loki"><a href="#使用helm安装loki" class="headerlink" title="使用helm安装loki"></a>使用helm安装loki</h2><h3 id="1-加入repo"><a href="#1-加入repo" class="headerlink" title="1.加入repo"></a>1.加入repo</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># helm repo add grafana https://grafana.github.io/helm-charts</span><br><span class="hljs-comment">#helm repo update</span><br></code></pre></td></tr></table></figure><h2 id="2-安装loki"><a href="#2-安装loki" class="headerlink" title="2.安装loki"></a>2.安装loki</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#helm  search  repo loki</span><br>NAME                        CHART VERSIONAPP VERSIONDESCRIPTION                                     <br>grafana/loki-stack          2.10.2       v2.9.3     Loki: like Prometheus, but <span class="hljs-keyword">for</span> logs.<br><br>先将loki 拉取下来<br><span class="hljs-comment">#helm pull grafana/loki-stack</span><br><span class="hljs-comment"># tar xf loki-stack-2.10.2.tgz &amp;&amp; cd loki-stack</span><br>使用制备器创建pv<br><span class="hljs-comment">#cat loki-values.yaml </span><br>loki:<br>  enabled: <span class="hljs-literal">true</span><br>  persistence:<br>    enabled: <span class="hljs-literal">true</span><br>    storageClassName: managed-nfs-storage <br>    accessModes:<br>      - ReadWriteOnce<br>    size: 1Gi<br><br>promtail:<br>  enabled: <span class="hljs-literal">true</span><br><br>grafana:<br>  enabled: <span class="hljs-literal">true</span><br>  adminPassword: admin  <span class="hljs-comment"># 修改为你自己的密码</span><br>  service:<br>    <span class="hljs-built_in">type</span>: NodePort       <span class="hljs-comment"># 如果是外部访问，可以使用 NodePort</span><br>    port: 80<br>  persistence:<br>    enabled: <span class="hljs-literal">true</span><br>    storageClassName: managed-nfs-storage<br>    accessModes:<br>      - ReadWriteOnce<br>    size: 1Gi<br><br>  <br>  <br><span class="hljs-comment"># helm install loki ./loki-stack -n loki -f ./loki-stack/loki-values.yaml</span><br></code></pre></td></tr></table></figure><h2 id="3-暴露loki-granafa端口"><a href="#3-暴露loki-granafa端口" class="headerlink" title="3.暴露loki granafa端口"></a>3.暴露loki granafa端口</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#kubectl -n loki get all</span><br>NAME                                READY   STATUS    RESTARTS   AGE<br>pod/loki-0                          1/1     Running   0          3m40s<br>pod/loki-grafana-5f59555598-nh98m   2/2     Running   0          3m40s<br>pod/loki-promtail-47pcs             1/1     Running   0          3m40s<br>pod/loki-promtail-dwcz4             1/1     Running   0          3m41s<br>pod/loki-promtail-gwxlc             1/1     Running   0          3m40s<br><br>NAME                      TYPE        CLUSTER-IP     EXTERNAL-IP   PORT(S)        AGE<br>service/loki              ClusterIP   10.98.5.98     &lt;none&gt;        3100/TCP       3m41s<br>service/loki-grafana      NodePort    10.102.44.99   &lt;none&gt;        80:31625/TCP   3m41s<br>service/loki-headless     ClusterIP   None           &lt;none&gt;        3100/TCP       3m41s<br>service/loki-memberlist   ClusterIP   None           &lt;none&gt;        7946/TCP       3m41s<br><br>NAME                           DESIRED   CURRENT   READY   UP-TO-DATE   AVAILABLE   NODE SELECTOR   AGE<br>daemonset.apps/loki-promtail   3         3         3       3            3           &lt;none&gt;          3m41s<br><br>NAME                           READY   UP-TO-DATE   AVAILABLE   AGE<br>deployment.apps/loki-grafana   1/1     1            1           3m41s<br><br>NAME                                      DESIRED   CURRENT   READY   AGE<br>replicaset.apps/loki-grafana-5f59555598   1         1         1       3m40s<br><br>NAME                    READY   AGE<br>statefulset.apps/loki   1/1     3m41s<br><br></code></pre></td></tr></table></figure><p>点击左上角 选中Explor   点击箭头指向的 即可看到日志</p><p><img src="D:\云原生自学\loki\images\image-20250504192455532.png" alt="image-20250504192455532"></p><p>可以在istio-system svc ingress控制器中加入 kubectl patch svc istio-ingressgateway -n istio-system <br>  -p ‘{“spec”:{“externalTrafficPolicy”:”Local”}}’  暴露真实ip</p>]]></content>
    
    
    <categories>
      
      <category>云原生</category>
      
    </categories>
    
    
    <tags>
      
      <tag>云原生</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>prometheus监控</title>
    <link href="/2025/05/26/%E7%9B%91%E6%8E%A7/"/>
    <url>/2025/05/26/%E7%9B%91%E6%8E%A7/</url>
    
    <content type="html"><![CDATA[<h2 id="整理流程"><a href="#整理流程" class="headerlink" title="整理流程"></a>整理流程</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs html">使用 Prometheus 结合 Kubernetes Operator 来监控服务的整体流程，没有包含 YAML 配置文件，只讲解步骤：<br><br>1. 安装 Prometheus Operator<br>首先，确保在 Kubernetes 集群中安装了 Prometheus Operator，这个 Operator 负责管理 Prometheus 的部署、配置、服务发现和监控。你可以通过 Helm 或直接应用 YAML 文件来安装 Prometheus Operator。<br><br>2. 创建 Service（服务暴露）<br>你需要在 Kubernetes 中为你的应用创建一个 Service，它会暴露应用的端口，以便 Prometheus 可以访问这些指标数据。<br><br>Service 是用来暴露应用的端口和接口，让外部或其他服务能够访问该服务。<br><br>在创建时，需要指定端口、选择器（确定哪个 Pod 或容器将被暴露）等信息。<br><br>3. 创建 Endpoints（可选）<br>一般情况下，Kubernetes 会自动为你的 Service 创建 Endpoints，用于暴露应用的网络地址和端口。如果你的应用暴露的是静态地址或需要手动配置，那么可以创建一个 Endpoints 资源。<br><br>4. 创建 ServiceMonitor（Prometheus 监控）<br>ServiceMonitor 是 Prometheus Operator 提供的一个资源对象，用来告知 Prometheus 哪些服务需要监控。ServiceMonitor 会关联到指定的 Kubernetes Service，并定义如何抓取该服务的指标数据。<br><br>在 ServiceMonitor 中，需要指定你要监控的 Service 的标签（例如，选择 app: my-app 的 Service），并配置抓取的端口和间隔等。<br><br>Prometheus 会根据 ServiceMonitor 自动发现并抓取服务的指标数据。<br><br>5. 验证 Prometheus 配置<br>一旦配置了 ServiceMonitor，Prometheus 会开始监控你定义的服务。可以通过访问 Prometheus 的 Web 界面来检查抓取的目标和监控的服务。<br><br>访问 Prometheus UI，查看 “Targets” 页面，确认目标服务是否正确显示并处于正常状态。<br><br>在 Prometheus UI 中，通过查询相关指标来确保服务的数据正在被抓取。<br><br>6. 设置告警（可选）<br>如果你想要设置告警规则，Prometheus 可以监控服务的健康状况并在出现问题时发送告警。例如，如果应用的响应时间过长，Prometheus 可以触发告警。<br><br>配置 PrometheusRule 资源来定义告警规则，如 HTTP 请求响应时间过长、错误率过高等。<br><br>配合 Alertmanager，Prometheus 可以将告警发送到不同的通知渠道（例如 Slack、邮件等）。<br><br>7. 维护与优化<br>扩展与调整：随着应用规模的增长，可以根据需求扩展 Prometheus 的配置，增加更多的 ServiceMonitor 或调整抓取间隔。<br><br>故障处理：根据告警和监控数据，及时发现服务问题并修复。可以利用监控数据来进行根本原因分析（RCA）。<br></code></pre></td></tr></table></figure><h2 id="开始安装"><a href="#开始安装" class="headerlink" title="开始安装"></a>开始安装</h2><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs ini">1. 解压下载的代码包<br>wget https://github.com/prometheus-operator/kube-prometheus/archive/refs/tags/v0.13.0.zip<br>unzip kube-prometheus-0.13.0.zip<br>rm -f kube-prometheus-0.13.0.zip &amp;&amp; cd kube-prometheus-0.13.0<br><br>2. 这里先看下有哪些镜像<br><span class="hljs-comment"># find ./ -type f |xargs egrep &#x27;image: quay.io|image: registry.k8s.io|image: grafana|image: docker.io&#x27;|awk &#x27;&#123;print $3&#125;&#x27;|sort|uniq</span><br><br>quay.io/prometheus-operator/prometheus-config-reloader:v0.67.1  <span class="hljs-comment"># 注意：这个镜像配置比较特殊，上面命令过滤不出来</span><br><br>grafana/grafana:9.5.3<br>docker.io/cloudnativelabs/kube-router<br>quay.io/brancz/kube-rbac-proxy:v0.14.2<br>quay.io/fabxc/prometheus_demo_service<br>quay.io/prometheus/alertmanager:v0.26.0<br>quay.io/prometheus/blackbox-exporter:v0.24.0<br>quay.io/prometheus/node-exporter:v1.6.1<br>quay.io/prometheus-operator/prometheus-operator:v0.67.1<br>quay.io/prometheus/prometheus:v2.46.0<br>registry.k8s.io/kube-state-metrics/kube-state-metrics:v2.9.2<br>registry.k8s.io/prometheus-adapter/prometheus-adapter:v0.11.1<br><br><span class="hljs-comment"># 由于上面的镜像中，有部分国内网络无法正常摘取，所以博哥将上述所有镜像已转存至docker hub上，用下面命令批量替换下镜像地址即可</span><br><br>find ./ -type f |xargs  sed -ri &#x27;s+quay.io/.*/+docker.io/bogeit/+g&#x27;<br>find ./ -type f |xargs  sed -ri &#x27;s+docker.io/cloudnativelabs/+docker.io/bogeit/+g&#x27;<br>find ./ -type f |xargs  sed -ri &#x27;s+grafana/+docker.io/bogeit/+g&#x27;<br>find ./ -type f |xargs  sed -ri &#x27;s+registry.k8s.io/.*/+docker.io/bogeit/+g&#x27;<br><br>3. 开始创建所有服务<br>kubectl create -f manifests/setup<br>kubectl create -f manifests/<br>过一会查看创建结果：<br>kubectl -n monitoring get all<br>kubectl -n monitoring get pod -w<br><br><span class="hljs-comment"># 附：清空上面部署的prometheus所有服务：</span><br>kubectl delete <span class="hljs-attr">--ignore-not-found</span>=<span class="hljs-literal">true</span> -f manifests/ -f manifests/setup<br><br><br></code></pre></td></tr></table></figure><h2 id="访问下prometheus的UI"><a href="#访问下prometheus的UI" class="headerlink" title="访问下prometheus的UI"></a>访问下prometheus的UI</h2><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-comment"># vim prometheus-ingress.yaml</span><br>apiVersion: networking.k8s.io/v1<br>kind: Ingress<br>metadata:<br>  namespace: monitoring  <span class="hljs-comment">#一定要和sv ep 要在一个命名空间</span><br>  name: prometheus<br>spec:<br>  rules:<br>  - host: prometheus.k8s.com<br>    http:<br>      paths:<br>      - backend:<br>          service:<br>            name: prometheus-k8s<br>            port:<br>              number: 9090<br>        path: /<br>        pathType: Prefix<br><br><br><span class="hljs-comment"># kubectl -n monitoring apply -f prometheus-ingress.yaml</span><br><br></code></pre></td></tr></table></figure><h2 id="grafana-ingress创建"><a href="#grafana-ingress创建" class="headerlink" title="grafana ingress创建"></a><a href="https://so.csdn.net/so/search?q=grafana&spm=1001.2101.3001.7020">grafana</a> ingress创建</h2><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-comment"># vim grafana-ingress.yaml</span><br>apiVersion: networking.k8s.io/v1<br>kind: Ingress<br>metadata:<br>  namespace: monitoring  <span class="hljs-comment">#一定要和sv ep 要在一个命名空间</span><br>  name: grafana<br>spec:<br>  rules:<br>  - host: grafana.k8s.com<br>    http:<br>      paths:<br>      - backend:<br>          service:<br>            name: grafana<br>            port:<br>              number: 3000<br>        path: /<br>        pathType: Prefix<br><br><br><span class="hljs-comment"># kubectl -n monitoring apply -f grafana-ingress.yaml</span><br><br>grafana 账号密码都是admin<br><br></code></pre></td></tr></table></figure><p>注意：删除自带的网络策略，否则访问服务都会被阻塞</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini">kubectl -n monitoring delete networkpolicies.networking.k8s.io --all<br></code></pre></td></tr></table></figure><p>通过ingress的</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs html">访问的流程是 通过命名空间 ingress-nginx  下面svc 关联的po去类似nginx的   <br>就是这个pod的ip 加上 svc暴漏的端口去代理 grafana.k8s.com  或者是 prometheus.k8s.com<br>grafana.k8s.com:3000      prometheus.k8s.com:3000<br><br> kubectl get svc -n ingress-nginx <br>NAME                                 TYPE       CLUSTER-IP      EXTERNAL-IP   PORT(S)                      AGE<br>ingress-nginx-controller             NodePort   10.96.186.188   <span class="hljs-tag">&lt;<span class="hljs-name">none</span>&gt;</span>        80:30000/TCP,443:31388/TCP   7d3h<br><br> kubectl get po -n ingress-nginx  -o wide<br>NAME                             READY   STATUS    RESTARTS        AGE     IP               NODE        NOMINATED NODE   READINESS GATES<br>ingress-nginx-controller-x84p4   1/1     Running   6 (5m20s ago)   8m31s   192.168.85.129   k8s-node1   <span class="hljs-tag">&lt;<span class="hljs-name">none</span>&gt;</span>           <span class="hljs-tag">&lt;<span class="hljs-name">none</span>&gt;</span><br><br></code></pre></td></tr></table></figure><h2 id="kube-controller-manager和kube-scheduler被监控"><a href="#kube-controller-manager和kube-scheduler被监控" class="headerlink" title="kube-controller-manager和kube-scheduler被监控"></a>kube-controller-manager和kube-scheduler被监控</h2><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-comment"># 这里我们发现这两服务监听的IP是0.0.0.0 正常</span><br><span class="hljs-comment"># ss -tlnp|egrep &#x27;controller|schedule&#x27;</span><br>LISTEN 0      32768              *:10257            *:*    users:((&quot;kube-controller&quot;,<span class="hljs-attr">pid</span>=<span class="hljs-number">3528</span>,fd=<span class="hljs-number">3</span>))                                                                                                                            <br>LISTEN 0      32768              *:10259            *:*    users:((&quot;kube-scheduler&quot;,<span class="hljs-attr">pid</span>=<span class="hljs-number">837</span>,fd=<span class="hljs-number">3</span>))           <br>-----------------------------------------------------------------------------------------------------------<br>如果是127.0.0.1:10257  解决办法如下<br><br>kubectl edit po kube-controller-manager-k8s-master -n kube-system       - <span class="hljs-attr">--bind-address</span>=<span class="hljs-number">0.0</span>.<span class="hljs-number">0.0</span><br><br><br>然后因为K8s的这两上核心组件我们是以二进制形式部署的，为了能让K8s上的prometheus能发现，我们需要来创建相应的service和endpoints来将其关联起来<br>这里面有所以不需要创建servicemonitoring<br>kubectl get servicemonitors.monitoring.coreos.com -A<br>NAMESPACE    NAME                      AGE<br>monitoring   alertmanager-main         28h<br>monitoring   blackbox-exporter         28h<br>monitoring   coredns                   28h<br>monitoring   grafana                   28h<br>monitoring   kube-apiserver            28h<br>monitoring   kube-controller-manager   28h<br>monitoring   kube-scheduler            28h<br>monitoring   kube-state-metrics        28h<br>monitoring   kubelet                   28h<br>monitoring   node-exporter             28h<br>monitoring   prometheus-adapter        28h<br>monitoring   prometheus-k8s            28h<br>monitoring   prometheus-operator       28h<br>------------------------------------------------------------------------------------------------------<br>apiVersion: v1<br>kind: Service<br>metadata:<br>  namespace: kube-system<br>  name: kube-controller-manager<br>  labels:<br>    app.kubernetes.io/name: kube-controller-manager<br>spec:<br>  type: ClusterIP<br>  clusterIP: None<br>  ports:<br>  - name: https-metrics<br>    port: 10257         <span class="hljs-comment">#默认端口</span><br>    targetPort: 10257<br>    protocol: TCP<br><br>---<br>apiVersion: v1<br>kind: Endpoints<br>metadata:<br>  labels:<br>    app.kubernetes.io/name: kube-controller-manager<br>  name: kube-controller-manager<br>  namespace: kube-system<br>subsets:<br>- addresses:<br>  - ip: 192.168.85.128   <span class="hljs-comment">#这个pod所对应的ip 如果有多个ip就写多个</span><br>  ports:<br>  - name: https-metrics<br>    port: 10257<br>    protocol: TCP<br><br>---<br><br>apiVersion: v1<br>kind: Service<br>metadata:<br>  namespace: kube-system<br>  name: kube-scheduler<br>  labels:<br>    app.kubernetes.io/name: kube-scheduler<br>spec:<br>  type: ClusterIP<br>  clusterIP: None<br>  ports:<br>  - name: https-metrics<br>    port: 10259<br>    targetPort: 10259<br>    protocol: TCP<br><br>---<br>apiVersion: v1<br>kind: Endpoints<br>metadata:<br>  labels:<br>    app.kubernetes.io/name: kube-scheduler<br>  name: kube-scheduler<br>  namespace: kube-system<br>subsets:<br>- addresses:<br>  - ip: 192.168.85.128    <span class="hljs-comment">#这个pod所对应的ip 如果有多个ip就写多个</span><br>  ports:<br>  - name: https-metrics<br>    port: 10259<br>    protocol: TCP<br>----------------------------------------------------------------------------------<br>将上面的yaml配置保存为repair-prometheus.yaml，然后创建它<br><br>kubectl apply -f repair-prometheus.yaml<br><br>创建完成后确认下<br><br><span class="hljs-comment"># kubectl -n kube-system get svc |egrep &#x27;controller|scheduler&#x27;</span><br>kube-controller-manager   ClusterIP   None            &lt;none&gt;        10252/TCP                      58s<br>kube-scheduler            ClusterIP   None            &lt;none&gt;        10251/TCP                      58s<br><br>然后再返回prometheus UI处，耐心等待一会，就能看到已经被发现了<br><br>serviceMonitor/monitoring/kube-controller-manager/0 (2/2 up)<br>serviceMonitor/monitoring/kube-scheduler/0 (2/2 up)<br><br></code></pre></td></tr></table></figure><h2 id="监控etcd"><a href="#监控etcd" class="headerlink" title="监控etcd"></a>监控etcd</h2><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><code class="hljs ini">利用下面命令，我们可以看到ETCD都暴露出了哪些监控指标出来<br>curl -k --cacert /etc/kubernetes/pki/ca.crt --cert /etc/kubernetes/pki/etcd/server.crt    --key /etc/kubernetes/pki/etcd/server.key https://192.168.85.128:2379/metrics<br>--------------------------------------------------------------------------------------------<br>上面查看没问题后，接下来我们开始进行配置使ETCD能被prometheus发现并监控<br><br><span class="hljs-comment"># 首先把ETCD的证书创建为secret</span><br>kubectl -n monitoring create secret generic etcd-certs <span class="hljs-attr">--from-file</span>=/etc/kubernetes/pki/ca.crt    --from-file=/etc/kubernetes/pki/etcd/server.crt  --from-file=/etc/kubernetes/pki/etcd/server.key <br><br><span class="hljs-comment"># 接着在prometheus里面引用这个secrets</span><br>kubectl -n monitoring edit prometheus k8s <br><br>spec:<br>...<br>  secrets:<br>  - etcd-certs<br><br><span class="hljs-comment"># 保存退出后，prometheus会自动重启服务pod以加载这个secret配置，过一会，我们进pod来查看下是不是已经加载到ETCD的证书了</span><br><span class="hljs-comment"># kubectl -n monitoring exec -it prometheus-k8s-0 -c prometheus  -- sh </span><br>/prometheus $ ls /etc/prometheus/secrets/etcd-certs/<br>ca.pem        etcd-key.pem  etcd.pem<br><br>-----------------------------------------------------------------------------------------------<br>因为etcd没有servicemonitoring所以要创建svc  ep 和 servicemonitoring<br>接下来准备创建service、endpoints以及ServiceMonitor的yaml配置<br><br>注意替换下面的NODE节点IP为实际ETCD所在NODE内网IP<br><br><span class="hljs-comment"># vim prometheus-etcd.yaml </span><br>apiVersion: v1<br>kind: Service<br>metadata:<br>  name: etcd-k8s<br>  namespace: monitoring<br>  labels:<br>    k8s-app: etcd<br>spec:<br>  type: ClusterIP<br>  clusterIP: None<br>  ports:<br>  - name: api<br>    port: 2379<br>    protocol: TCP<br>---<br>apiVersion: v1<br>kind: Endpoints<br>metadata:<br>  name: etcd-k8s<br>  namespace: monitoring<br>  labels:<br>    k8s-app: etcd<br>subsets:<br>- addresses:<br>  - ip: 192.168.156.128      <span class="hljs-comment">#etcd在哪就写哪的ip多个就写多个</span><br>  ports:<br>  - name: api<br>    port: 2379<br>    protocol: TCP<br>---<br>apiVersion: monitoring.coreos.com/v1<br>kind: ServiceMonitor<br>metadata:<br>  name: etcd-k8s<br>  namespace: monitoring<br>  labels:<br>    k8s-app: etcd-k8s<br>spec:<br>  jobLabel: k8s-app<br>  endpoints:<br>  - port: api<br>    interval: 30s<br>    scheme: https<br>    tlsConfig:<br>      caFile: /etc/prometheus/secrets/etcd-certs/ca.crt<br>      certFile: /etc/prometheus/secrets/etcd-certs/server.crt<br>      keyFile: /etc/prometheus/secrets/etcd-certs/server.key<br>      <span class="hljs-comment">#use insecureSkipVerify only if you cannot use a Subject Alternative Name</span><br>      insecureSkipVerify: true <br>  selector:<br>    matchLabels:<br>      k8s-app: etcd<br>  namespaceSelector:<br>    matchNames:<br>    - monitoring<br>-------------------------------------------------------------------------    <br>    <br>    <br>    开始创建上面的资源<br><br><span class="hljs-comment"># kubectl apply -f prometheus-etcd.yaml </span><br>service/etcd-k8s created<br>endpoints/etcd-k8s created<br>servicemonitor.monitoring.coreos.com/etcd-k8s created<br><br>过一会，就可以在prometheus UI上面看到ETCD集群被监控了<br><br>serviceMonitor/monitoring/etcd-k8s/0 (3/3 up)<br><br>------------------------------------------------------------------------------<br>在grafana官网模板中心搜索etcd，下载这个json格式的模板文件<br>https://grafana.com/grafana/dashboards/3070-etcd/<br><br>然后打开自己先部署的grafana首页，<br>点击左上边菜单栏HOME --- Data source --- Add data source --- 选择 Prometheus<br>查看prometheus的详细地址 并编辑进去保存：<br><span class="hljs-comment"># kubectl -n monitoring get secrets grafana-datasources -o yaml</span><br><br>再点击右上角 +^ Import dashboard --- <br>点击Upload .json File 按钮，上传上面下载好的json文件 3070_rev3.json，<br>点击Import，即可显示etcd集群的图形监控信息<br></code></pre></td></tr></table></figure><h2 id="监控ingress"><a href="#监控ingress" class="headerlink" title="监控ingress"></a>监控ingress</h2><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><code class="hljs ini">注意 因为prometheus 命名空间是 monitoring   <br>        ingress的命名空间 是 ingress-nginx  需要对这个prometheus命名空间绑定角色<br> ------------------------------------------------------------------------------------<br>cat cr.yaml <br>apiVersion: rbac.authorization.k8s.io/v1<br>kind: ClusterRole<br>metadata:<br>  name: prometheus-access-all-namespaces<br>rules:<br>  - apiGroups: <span class="hljs-section">[&quot;&quot;]</span><br>    resources: <span class="hljs-section">[&quot;services&quot;, &quot;endpoints&quot;, &quot;pods&quot;]</span><br>    verbs: <span class="hljs-section">[&quot;get&quot;, &quot;list&quot;]</span><br>----------------------------------------------------------------<br>cat crb.yaml <br>apiVersion: rbac.authorization.k8s.io/v1<br>kind: ClusterRoleBinding<br>metadata:<br>  name: prometheus-access-all-namespaces-binding<br>subjects:<br>  - kind: ServiceAccount<br>    name: prometheus-k8s<br>    namespace: monitoring<br>roleRef:<br>  kind: ClusterRole<br>  name: prometheus-access-all-namespaces<br>  apiGroup: rbac.authorization.k8s.io<br>-----------------------------------------------------------------<br>因为前面ingress-nginx服务是以daemonset形式部署的，并且映射了自己的端口到宿主机上，那么我可以直接用pod运行NODE上的IP来看下metrics<br><br>kubectl -n ingress-nginx get pod  -o wide<br>NAME                             READY   STATUS    RESTARTS   AGE   IP               NODE        NOMINATED NODE   READINESS GATES<br>ingress-nginx-controller-mbs95   1/1     Running   0          74m   192.168.85.129   k8s-node1   &lt;none&gt;           &lt;none&gt;<br><br><br><span class="hljs-comment"># 开启metrics指标</span><br><span class="hljs-comment"># kubectl -n ingress-nginx  edit ds ingress-nginx-controller</span><br><span class="hljs-comment"># 搜索 metrics   ， 找到  - --enable-metrics=  设置为 true</span><br><span class="hljs-comment">#  curl  192.168.85.129:10254/metrics</span><br>------------------------------------------------------------------------------<br>创建 servicemonitor配置让prometheus能发现ingress-nginx的metrics<br>cat ingress.servicemonitoring.yaml <br>apiVersion: monitoring.coreos.com/v1<br>kind: ServiceMonitor<br>metadata:<br>  name: ingress-servicemonitor <br>  namespace: monitoring <br>  labels:<br>    app.kubernetes.io/name: ingress-nginx<br>spec:<br>  jobLabel: ingress-test <br>  endpoints:<br>  - port: app <br>    interval: 30s<br>    scheme: http<br>    path: /metrics<br>  selector:<br>    matchLabels:<br>      app.kubernetes.io/name: ingress-nginx<br>  namespaceSelector:<br>    matchNames:<br>    - ingress-nginx <br>-------------------------------------------------------------------<br>创建它<br><br><span class="hljs-comment"># kubectl apply -f ingress-nginx-servicemonitor.yaml </span><br>servicemonitor.monitoring.coreos.com/nginx-ingress-scraping created<br><span class="hljs-comment"># kubectl  get servicemonitors.monitoring.coreos.com  -n monitoring </span><br>NAME                      AGE<br>alertmanager-main         32h<br>blackbox-exporter         32h<br>coredns                   32h<br>etcd-k8s                  27h<br>grafana                   32h<br>ingress-servicemonitor    78m<br>kube-apiserver            32h<br>kube-controller-manager   32h<br>kube-scheduler            32h<br>kube-state-metrics        32h<br>kubelet                   32h<br>node-exporter             32h<br>prometheus-adapter        32h<br>prometheus-k8s            32h<br>prometheus-operator       32h<br><br><br>再到prometheus UI上看下，发现已经有了<br><br>serviceMonitor/monitoring/ingress-servicemonitor/0 (1/1 up)<br><br>下载grafana模板导入使用<br><br>https://grafana.com/grafana/dashboards/14314-kubernetes-nginx-ingress-controller-nextgen-devops-nirvana/<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>云原生</category>
      
    </categories>
    
    
    <tags>
      
      <tag>云原生</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>redis高可用</title>
    <link href="/2025/05/26/redis%E9%AB%98%E5%8F%AF%E7%94%A8/"/>
    <url>/2025/05/26/redis%E9%AB%98%E5%8F%AF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<p>主从的原理就是 从节点向[主节点]发送一个syn请求 主节点收到请求 在后台创建一个rdb快照文件发送给从节点 ，再在暂存空间记录创建到发送完成这段时间的所有写命令，等rdb发送完成再发送写命令 从节点加载rdb和写命令完成主从同步 </p><p>哨兵就是通过ping 如果通不了了 就会告知其他的哨兵 都发现ping不了了则标记下线 选举出新的主节点 !!</p><p>直接开整</p><p>首先最简单的</p><h5 id="直接配置不用docker的操作"><a href="#直接配置不用docker的操作" class="headerlink" title="直接配置不用docker的操作"></a>直接配置不用docker的操作</h5><table><tbody><tr><td>master</td><td>192.168.85.128</td></tr><tr><td>slave1</td><td>192.168.85.129</td></tr><tr><td>slave2</td><td>192.168.85.130</td></tr></tbody></table><h6 id="1-安装redis"><a href="#1-安装redis" class="headerlink" title="1.安装redis"></a>1.安装redis</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># yum install redis -y</span><br></code></pre></td></tr></table></figure><h6 id="2-更改配置文件"><a href="#2-更改配置文件" class="headerlink" title="2.更改配置文件"></a>2.更改配置文件</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs bash">主<br><span class="hljs-comment"># ls /etc/redis*</span><br>/etc/redis.conf  /etc/redis-sentinel.conf<br>这是redis的配置 这是哨兵的配置文件<br><br><span class="hljs-comment"># cat /etc/redis.conf|grep -v &quot;^#&quot;|grep -v &quot;^$&quot;</span><br><span class="hljs-built_in">bind</span> 0.0.0.0<br><br>protected-mode no <span class="hljs-comment">#关闭保护模式 这个很重要 不关闭不会同步</span><br><br>东西很多咱们只看需要修改的<br><br>从<br><span class="hljs-comment"># ls /etc/redis*</span><br>/etc/redis.conf  /etc/redis-sentinel.conf<br>这是redis的配置    这是哨兵的配置文件<br><br><span class="hljs-comment"># cat /etc/redis.conf|grep -v &quot;^#&quot;|grep -v &quot;^$&quot;</span><br><br><span class="hljs-built_in">bind</span> 0.0.0.0<br><br>protected-mode no  <span class="hljs-comment">#关闭保护模式 这个很重要 不关闭不会同步</span><br><br>slaveof 192.168.85.128 6379  <span class="hljs-comment">#从的配置文件里写上主的ip加端口</span><br></code></pre></td></tr></table></figure><h6 id="3-启动redis查看是否同步了"><a href="#3-启动redis查看是否同步了" class="headerlink" title="3.启动redis查看是否同步了"></a>3.启动redis查看是否同步了</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># systemctl start redis</span><br><span class="hljs-comment"># redis-cli  -h 192.168.85.130 info replication</span><br><span class="hljs-comment"># Replication</span><br><br>role:master<br><br>connected_slaves:2<br><br>slave0:ip=192.168.85.128,port=6379,state=online,offset=1615599,lag=1<br><br>slave1:ip=192.168.85.129,port=6379,state=online,offset=1615742,lag=1<br><br>master_repl_offset:1615742<br><br>repl_backlog_active:1<br><br>repl_backlog_size:1048576<br><br>repl_backlog_first_byte_offset:567167<br><br>repl_backlog_histlen:1048576<br></code></pre></td></tr></table></figure><h6 id="4-配置哨兵监控redis"><a href="#4-配置哨兵监控redis" class="headerlink" title="4.配置哨兵监控redis"></a>4.配置哨兵监控redis</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs null">主从都一样配置 <br># cat /etc/redis-sentinel.conf |grep -v &quot;^#&quot;|grep -v &quot;^$&quot; <br>protected-mode no #一定要no <br>dir &quot;/tmp&quot; #定义的这个目录要让哨兵有权限写进入 w写权限一定要 <br>sentinel monitor mymaster 192.168.85.128 6379 2 #主ip 从要有两个要不然就没意义了 <br>sentinel down-after-milliseconds mymaster 10000 <br>sentinel failover-timeout mymaster 30000<br></code></pre></td></tr></table></figure><h6 id="5-启动哨兵-测试是否成功"><a href="#5-启动哨兵-测试是否成功" class="headerlink" title="5.启动哨兵  测试是否成功"></a>5.启动哨兵  测试是否成功</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs null"># systemctl start redis-sentinel <br># systemctl stop redis #主节点的 <br>[root@localhost redis]# redis-cli -h 192.168.85.130 info replication <br># Replication role:master connected_slaves:1 slave0:ip=192.168.85.129,port=6379,state=online,offset=1710180,lag=0 #128ip没了说明成功了 master_repl_offset:1710323 <br>repl_backlog_active:1 <br>repl_backlog_size:1048576 <br>repl_backlog_first_byte_offset:661748 <br>repl_backlog_histlen:1048576<br></code></pre></td></tr></table></figure><h6 id="6-附加-redis-sub-pub发布-订阅模式"><a href="#6-附加-redis-sub-pub发布-订阅模式" class="headerlink" title="6.附加 redis sub pub发布&#x2F;订阅模式"></a>6.附加 redis sub pub发布&#x2F;订阅模式</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs bash">SUBSCRIBE nb <span class="hljs-comment"># 订阅者订阅nb这个信息</span><br><br>Reading messages... (press Ctrl-C to quit)<br><br>1) <span class="hljs-string">&quot;subscribe&quot;</span><br><br>2) <span class="hljs-string">&quot;nb&quot;</span><br><br>3) (<span class="hljs-built_in">integer</span>)<br><br>PUBLISH nb <span class="hljs-string">&quot;nihao&quot;</span><br><br>(<span class="hljs-built_in">integer</span>) 1<br><br>127.0.0.1:6379&gt;<br><br>SUBSCRIBE nb<br><br>Reading messages... (press Ctrl-C to quit)<br><br>1) <span class="hljs-string">&quot;subscribe&quot;</span><br><br>2) <span class="hljs-string">&quot;nb&quot;</span><br><br>3) (<span class="hljs-built_in">integer</span>) 1<br><br>1) <span class="hljs-string">&quot;message&quot;</span><br><br>2) <span class="hljs-string">&quot;nb&quot;</span><br><br>3) <span class="hljs-string">&quot;nihao&quot;</span><br></code></pre></td></tr></table></figure><h5 id="用docker-compose方式实现"><a href="#用docker-compose方式实现" class="headerlink" title="用docker-compose方式实现"></a>用docker-compose方式实现</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs bash"><br><span class="hljs-comment"># tree </span><br>.<br><br>├── docker-compose.yml<br><br>├── docker-compose.yml_back<br><br>├── master<br><br>│   └── redis.conf<br><br>├── sentinel.conf<br><br>└── slave<br><br>└── redis.conf<br><br>2 directories, 5 files<br></code></pre></td></tr></table></figure><h6 id="1-编写docker-compose-yml"><a href="#1-编写docker-compose-yml" class="headerlink" title="1.编写docker-compose.yml"></a>1.编写docker-compose.yml</h6><p>注意点：最好固定在一个ip上  command 使用&amp;&amp;可能会造成服务阻塞 用&amp; exec代替</p><p>               定义网络是networks 需要顶格写 </p><p>               写完用docker-compose config 检验代码是否正确</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># cat docker-compose.yml </span><br><br>services:<br><br>redis-master:<br><br>image: 192.168.85.128/nb/redis:latest<br><br>container_name: redis-master<br><br>networks:<br><br>redis-network:<br><br>ipv4_address: 172.23.0.2<br><br><span class="hljs-built_in">command</span>: [<span class="hljs-string">&quot;bash&quot;</span>, <span class="hljs-string">&quot;-c&quot;</span>, <span class="hljs-string">&quot;redis-server /etc/redis/redis.conf &amp; exec redis-server /etc/redis/sentinel.conf --sentinel&quot;</span>]<br><br>volumes:<br><br>- ./master/redis.conf:/etc/redis/redis.conf<br><br>- ./sentinel.conf:/etc/redis/sentinel.conf<br><br>restart: always<br><br>ports:<br><br>- <span class="hljs-string">&quot;6380:6379&quot;</span><br><br>- <span class="hljs-string">&quot;26380:26379&quot;</span><br><br>redis-slave1:<br><br>image: 192.168.85.128/nb/redis:latest<br><br>container_name: redis-slave1<br><br>networks:<br><br>redis-network:<br><br>ipv4_address: 172.23.0.3<br><br><span class="hljs-built_in">command</span>: [<span class="hljs-string">&quot;bash&quot;</span>, <span class="hljs-string">&quot;-c&quot;</span>, <span class="hljs-string">&quot;redis-server /etc/redis/redis.conf &amp; exec redis-server /etc/redis/sentinel.conf --sentinel&quot;</span>]<br><br>volumes:<br><br>- ./slave/redis.conf:/etc/redis/redis.conf<br><br>- ./sentinel.conf:/etc/redis/sentinel.conf<br><br>ports:<br><br>- <span class="hljs-string">&quot;6381:6379&quot;</span><br><br>- <span class="hljs-string">&quot;26381:26379&quot;</span><br><br>depends_on: <span class="hljs-comment">#运行在master之后</span><br><br>- redis-master<br><br>redis-slave2:<br><br>image: 192.168.85.128/nb/redis:latest<br><br>container_name: redis-slave2<br><br>networks:<br><br>redis-network:<br><br>ipv4_address: 172.23.0.4<br><br><span class="hljs-built_in">command</span>: [<span class="hljs-string">&quot;bash&quot;</span>, <span class="hljs-string">&quot;-c&quot;</span>, <span class="hljs-string">&quot;redis-server /etc/redis/redis.conf &amp; exec redis-server /etc/redis/sentinel.conf --sentinel&quot;</span>]<br><br>volumes:<br><br>- ./slave/redis.conf:/etc/redis/redis.conf<br><br>- ./sentinel.conf:/etc/redis/sentinel.conf<br><br>ports:<br><br>- <span class="hljs-string">&quot;6382:6379&quot;</span><br><br>- <span class="hljs-string">&quot;26382:26379&quot;</span><br><br>depends_on:<br><br>- redis-master<br><br>networks:<br><br>redis-network:<br><br>driver: bridge<br><br>ipam:<br><br>driver: default<br><br>config:<br><br>- subnet: 172.23.0.0/24<br></code></pre></td></tr></table></figure><h6 id="2-编写-master和slave文件-和哨兵"><a href="#2-编写-master和slave文件-和哨兵" class="headerlink" title="2.编写 master和slave文件 和哨兵"></a>2.编写 master和slave文件 和哨兵</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># cat master/redis.conf </span><br><br><span class="hljs-built_in">bind</span> 0.0.0.0<br><br>protected-mode no<br><br>port 6379<br><br>appendonly <span class="hljs-built_in">yes</span><br><br><span class="hljs-built_in">bind</span> 0.0.0.0<br><br>protected-mode no<br><br>port 6379<br><br>appendonly <span class="hljs-built_in">yes</span><br><br>slaveof 172.23.0.2 6379<br><br>port 26379<br><br>sentinel monitor mymaster 172.23.0.2 6379 2<br><br>sentinel down-after-milliseconds mymaster 5000<br><br>sentinel failover-timeout mymaster 10000<br><br>sentinel parallel-syncs mymaster 1<br></code></pre></td></tr></table></figure><h6 id="3-测试停止redis-master"><a href="#3-测试停止redis-master" class="headerlink" title="3.测试停止redis-master"></a>3.测试停止redis-master</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># redis-cli -p 6381 info replication</span><br><span class="hljs-comment"># Replication</span><br><br>role:master<br><br>connected_slaves:1<br><br>slave0:ip=172.23.0.4,port=6379,state=online,offset=78826,lag=0<br><br>master_failover_state:no-failover<br><br>master_replid:9f5b5a6d7cc115b658406a112116f5f4c7ee4b8f<br><br>master_replid2:f83e52939d733f9789838c7af50db30bbd041e71<br><br>master_repl_offset:78826<br><br>second_repl_offset:8631<br><br>repl_backlog_active:1<br><br>repl_backlog_size:1048576<br><br>repl_backlog_first_byte_offset:834<br><br>repl_backlog_histlen:77993<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>中间件</category>
      
    </categories>
    
    
    <tags>
      
      <tag>中间件</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>kafka安装和配置</title>
    <link href="/2025/05/26/kafka_4.0.0_(%E7%94%A8kraft%E6%A8%A1%E5%BC%8F)/"/>
    <url>/2025/05/26/kafka_4.0.0_(%E7%94%A8kraft%E6%A8%A1%E5%BC%8F)/</url>
    
    <content type="html"><![CDATA[<h1 id="kafka-4-0-0-用kraft模式"><a href="#kafka-4-0-0-用kraft模式" class="headerlink" title="kafka 4.0.0 (用kraft模式)"></a>kafka 4.0.0 (用kraft模式)</h1><h2 id="1-安装kafka-需要有jdk环境"><a href="#1-安装kafka-需要有jdk环境" class="headerlink" title="1.安装kafka 需要有jdk环境"></a>1.安装kafka 需要有jdk环境</h2><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-comment">#wget https://downloads.apache.org/kafka/4.0.0/kafka_2.13-4.0.0.tgz</span><br></code></pre></td></tr></table></figure><h2 id="1-1修改配置文件"><a href="#1-1修改配置文件" class="headerlink" title="1.1修改配置文件"></a>1.1修改配置文件</h2><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-comment"># cat config/server.properties </span><br><span class="hljs-attr">node.id</span>=<span class="hljs-number">1</span> <span class="hljs-comment">#唯一的值</span><br><span class="hljs-attr">log.dirs</span>=/data/kafka-logs<br><br><span class="hljs-attr">listeners</span>=PLAINTEXT://<span class="hljs-number">192.168</span>.<span class="hljs-number">85.128</span>:<span class="hljs-number">9092</span>,CONTROLLER://<span class="hljs-number">192.168</span>.<span class="hljs-number">85.128</span>:<span class="hljs-number">9093</span> <span class="hljs-comment">#每个节点的ip</span><br><span class="hljs-attr">controller.listener.names</span>=CONTROLLER<br><span class="hljs-attr">inter.broker.listener.name</span>=PLAINTEXT<br><span class="hljs-attr">listener.security.protocol.map</span>=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT<br><br><span class="hljs-attr">process.roles</span>=broker,controller<br><span class="hljs-attr">controller.quorum.voters</span>=<span class="hljs-number">1</span>@<span class="hljs-number">192.168</span>.<span class="hljs-number">85.128</span>:<span class="hljs-number">9093</span>,<span class="hljs-number">2</span>@<span class="hljs-number">192.168</span>.<span class="hljs-number">85.129</span>:<span class="hljs-number">9093</span>,<span class="hljs-number">3</span>@<span class="hljs-number">192.168</span>.<span class="hljs-number">85.130</span>:<span class="hljs-number">9093</span> <span class="hljs-comment">#固定这样配置</span><br><br></code></pre></td></tr></table></figure><h2 id="1-2每个节点执行一下（初始化-Kafka-数据目录）"><a href="#1-2每个节点执行一下（初始化-Kafka-数据目录）" class="headerlink" title="1.2每个节点执行一下（初始化 Kafka 数据目录）"></a>1.2每个节点执行一下（初始化 Kafka 数据目录）</h2><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-comment">#bin/kafka-storage.sh format -t cluster-id-123 -c config/server.properties</span><br><span class="hljs-comment">#cat /data/kafka-logs/meta.properties</span><br><span class="hljs-attr">node.id</span>=<span class="hljs-number">1</span><br><span class="hljs-attr">directory.id</span>=T-V8hYIPF4f6O3aJf0dB7A<br><span class="hljs-attr">version</span>=<span class="hljs-number">1</span><br><span class="hljs-attr">cluster.id</span>=cluster-id-<span class="hljs-number">123</span> <span class="hljs-comment">#确保这个值在三台机子都一样</span><br><br></code></pre></td></tr></table></figure><h2 id="1-3启动集群"><a href="#1-3启动集群" class="headerlink" title="1.3启动集群"></a>1.3启动集群</h2><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-comment">#nohup bin/kafka-server-start.sh config/server.properties &gt; kafka.log 2&gt;&amp;1 &amp;</span><br></code></pre></td></tr></table></figure><h2 id="1-4测试"><a href="#1-4测试" class="headerlink" title="1.4测试"></a>1.4测试</h2><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-comment">#bin/kafka-topics.sh --bootstrap-server 192.168.85.128:9092 --list</span><br>出现topic或者没有报错则为成功<br><br><span class="hljs-comment">#bin/kafka-topics.sh --bootstrap-server 192.168.85.128:9092 --create --topic test-topic --partitions 3 --replication-factor 2</span><br>--topic: 指定要创建的主题名称。<br><br>--partitions: 指定主题的分区数量。<br><br>--replication-factor: 指定副本因子。<br><br>启动生产者<br><span class="hljs-comment">#bin/kafka-console-producer.sh --bootstrap-server 192.168.85.128:9092 --topic test-topic #ip随便写哪个</span><br>启动消费者<br><span class="hljs-comment">#bin/kafka-console-consumer.sh --bootstrap-server 192.168.85.128:9092 --topic test-topic --from-beginning</span><br></code></pre></td></tr></table></figure><h1 id="配置优化"><a href="#配置优化" class="headerlink" title="配置优化"></a>配置优化</h1><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-comment"># Kafka Broker 配置</span><br><br><span class="hljs-comment"># Kafka Broker 的唯一标识符</span><br><span class="hljs-attr">broker.id</span>=<span class="hljs-number">1</span><br><br><span class="hljs-comment"># 设置监听的 IP 和端口</span><br><span class="hljs-attr">listeners</span>=PLAINTEXT://<span class="hljs-number">0.0</span>.<span class="hljs-number">0.0</span>:<span class="hljs-number">9092</span><br><span class="hljs-attr">advertised.listeners</span>=PLAINTEXT://kafka-broker-<span class="hljs-number">1</span>:<span class="hljs-number">9092</span><br><br><span class="hljs-comment"># 日志存储目录</span><br><span class="hljs-attr">log.dirs</span>=/mnt/data/kafka-logs,/mnt/data2/kafka-logs<br><br><span class="hljs-comment"># 每个 Kafka 分区默认的分区数</span><br><span class="hljs-attr">num.partitions</span>=<span class="hljs-number">3</span><br><br><span class="hljs-comment"># 写入确认机制</span><br><span class="hljs-attr">acks</span>=all  <span class="hljs-comment"># 所有副本都确认后再返回</span><br><br><span class="hljs-comment"># 每个请求最大字节数</span><br><span class="hljs-attr">fetch.max.bytes</span>=<span class="hljs-number">52428800</span>  <span class="hljs-comment"># 50 MB</span><br><br><span class="hljs-comment"># 网络线程数</span><br><span class="hljs-attr">num.network.threads</span>=<span class="hljs-number">3</span><br><br><span class="hljs-comment"># I/O 线程数</span><br><span class="hljs-attr">num.io.threads</span>=<span class="hljs-number">8</span><br><br><span class="hljs-comment"># 处理每秒钟的最大请求数</span><br><span class="hljs-attr">queued.max.requests</span>=<span class="hljs-number">500</span><br><br><span class="hljs-comment"># 日志文件的最大大小</span><br><span class="hljs-attr">log.segment.bytes</span>=<span class="hljs-number">1073741824</span>  <span class="hljs-comment"># 1 GB</span><br><br><span class="hljs-comment"># 日志文件滚动时的最大时间</span><br><span class="hljs-attr">log.roll.ms</span>=<span class="hljs-number">86400000</span>  <span class="hljs-comment"># 24 hours</span><br><br><span class="hljs-comment"># 日志清理策略（删除策略）</span><br><span class="hljs-attr">log.cleanup.policy</span>=delete<br><br><span class="hljs-comment"># 设置每个分区的最大保留大小（10GB）</span><br><span class="hljs-attr">log.retention.bytes</span>=<span class="hljs-number">10737418240</span>  <span class="hljs-comment"># 10 GB</span><br><br><span class="hljs-comment"># 设置日志的最大保留时间（7天）</span><br><span class="hljs-attr">log.retention.hours</span>=<span class="hljs-number">168</span>  <span class="hljs-comment"># 7 days</span><br><br><span class="hljs-comment"># 控制每个分区的最大 ISR 数量</span><br><span class="hljs-attr">min.insync.replicas</span>=<span class="hljs-number">2</span>  <span class="hljs-comment"># 至少2个副本同步成功</span><br><br><span class="hljs-comment"># 控制副本拉取数据的最大字节数</span><br><span class="hljs-attr">replica.fetch.max.bytes</span>=<span class="hljs-number">10485760</span>  <span class="hljs-comment"># 10 MB</span><br><br><span class="hljs-comment"># 副本拉取的最大等待时间</span><br><span class="hljs-attr">replica.fetch.wait.max.ms</span>=<span class="hljs-number">500</span>  <span class="hljs-comment"># 500ms</span><br><br><span class="hljs-comment"># 设置网络缓冲区大小</span><br><span class="hljs-attr">socket.send.buffer.bytes</span>=<span class="hljs-number">1048576</span>  <span class="hljs-comment"># 1 MB</span><br><span class="hljs-attr">socket.receive.buffer.bytes</span>=<span class="hljs-number">1048576</span>  <span class="hljs-comment"># 1 MB</span><br><br><span class="hljs-comment"># 设置最大网络连接空闲时间</span><br><span class="hljs-attr">connections.max.idle.ms</span>=<span class="hljs-number">600000</span>  <span class="hljs-comment"># 10 minutes</span><br><br><span class="hljs-comment"># 服务器的最大连接数</span><br><span class="hljs-attr">max.connections</span>=<span class="hljs-number">10000</span><br><br><span class="hljs-comment"># 客户端与服务器之间的最大请求字节数</span><br><span class="hljs-attr">max.request.size</span>=<span class="hljs-number">10485760</span>  <span class="hljs-comment"># 10 MB</span><br><br><span class="hljs-comment"># Kafka 的最大消息批量大小</span><br><span class="hljs-attr">batch.size</span>=<span class="hljs-number">16384</span>  <span class="hljs-comment"># 16 KB</span><br><br><span class="hljs-comment"># Kafka 高级日志压缩设置（消息压缩）</span><br><span class="hljs-attr">compression.type</span>=snappy<br><br><span class="hljs-comment"># 增强 Kafka 对事务的支持</span><br><span class="hljs-attr">transaction.state.log.replication.factor</span>=<span class="hljs-number">3</span><br><span class="hljs-attr">transaction.state.log.min.isr</span>=<span class="hljs-number">2</span><br><br><span class="hljs-comment"># 允许的最大消息大小（默认为 1 MB）</span><br><span class="hljs-attr">message.max.bytes</span>=<span class="hljs-number">1048576</span>  <span class="hljs-comment"># 1 MB</span><br><br><span class="hljs-comment"># Kafka 使用 G1GC 进行垃圾回收的 JVM 配置</span><br>export <span class="hljs-attr">KAFKA_JVM_PERFORMANCE_OPTS</span>=<span class="hljs-string">&quot;-XX:+UseG1GC -XX:MaxGCPauseMillis=200&quot;</span><br><br><span class="hljs-comment"># Kafka 使用的堆内存大小</span><br>export <span class="hljs-attr">KAFKA_HEAP_OPTS</span>=<span class="hljs-string">&quot;-Xms4G -Xmx4G&quot;</span><br><br><span class="hljs-comment"># 配置监听协议</span><br><span class="hljs-attr">listener.security.protocol.map</span>=PLAINTEXT:PLAINTEXT,SSL:SSL,SASL_PLAINTEXT:SASL_PLAINTEXT<br><span class="hljs-attr">listener.name.internals</span>=PLAINTEXT://<span class="hljs-number">0.0</span>.<span class="hljs-number">0.0</span>:<span class="hljs-number">9092</span><br><br><span class="hljs-comment"># Kafka 启动时使用的线程池大小</span><br><span class="hljs-attr">num.recovery.threads.per.data.dir</span>=<span class="hljs-number">1</span><br><br><span class="hljs-comment"># Kafka 聚合或压缩日志策略</span><br><span class="hljs-attr">log.cleaner.min.cleanable.ratio</span>=<span class="hljs-number">0.5</span>  <span class="hljs-comment"># 设置日志清理的最小可清理比例</span><br><br><span class="hljs-comment"># Kafka 集群的 ZooKeeper 配置（如果是基于 ZooKeeper 的）</span><br><span class="hljs-attr">zookeeper.connect</span>=<span class="hljs-number">192.168</span>.<span class="hljs-number">85.128</span>:<span class="hljs-number">2181</span>,<span class="hljs-number">192.168</span>.<span class="hljs-number">85.129</span>:<span class="hljs-number">2181</span>,<span class="hljs-number">192.168</span>.<span class="hljs-number">85.130</span>:<span class="hljs-number">2181</span><br><span class="hljs-attr">zookeeper.connection.timeout.ms</span>=<span class="hljs-number">6000</span><br><br><span class="hljs-comment"># Kafka 集群的连接超时和心跳配置</span><br><span class="hljs-attr">socket.connection.setup.timeout.ms</span>=<span class="hljs-number">10000</span><br><span class="hljs-attr">socket.connection.setup.timeout.max.ms</span>=<span class="hljs-number">30000</span><br><br><span class="hljs-comment"># Kafka 最大队列请求数</span><br><span class="hljs-attr">queued.max.requests</span>=<span class="hljs-number">500</span><br><br><span class="hljs-comment"># Kafka 数据传输的最大文件大小</span><br><span class="hljs-attr">log.max.message.bytes</span>=<span class="hljs-number">1000000</span>  <span class="hljs-comment"># 1 MB</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>中间件</category>
      
    </categories>
    
    
    <tags>
      
      <tag>中间件</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>搭建博客</title>
    <link href="/2025/05/26/%E4%B8%93%E5%B1%9E%E5%8D%9A%E5%AE%A2/"/>
    <url>/2025/05/26/%E4%B8%93%E5%B1%9E%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<p>搭建自己的博客</p><p>我这里用的是云服务器 centos的</p><h2 id="1-安装git和nodejs"><a href="#1-安装git和nodejs" class="headerlink" title="1.安装git和nodejs"></a>1.安装git和nodejs</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs bash">使用非root用户!!!!<br>git下载地址https://git-scm.com/downloads<br><span class="hljs-comment">#yum install -y git</span><br>nodejs下载地址https://nodejs.org/en/download/<br><span class="hljs-comment">#curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.40.3/install.sh | bash</span><br><br><span class="hljs-comment">#\. &quot;$HOME/.nvm/nvm.sh&quot;</span><br><br><span class="hljs-comment">#nvm install 16 #安装22太高了要很多依赖</span><br><br><span class="hljs-comment">#node -v</span><br>v16.20.2<br><span class="hljs-comment"># npm -v</span><br>8.19.4<br><span class="hljs-comment"># git --version</span><br>git version 1.8.3.1<br>这里就安装成功了<br></code></pre></td></tr></table></figure><h2 id="2-安装Hexo"><a href="#2-安装Hexo" class="headerlink" title="2.安装Hexo"></a>2.安装Hexo</h2><p>以上环境准备好了就可使用 npm 开始安装 Hexo 了，在命令行输入执行如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#npm install -g hexo-cli</span><br>做初始化 ！！！<br><span class="hljs-comment">#hexo init myBlog</span><br><span class="hljs-comment">#cd myBlog</span><br><span class="hljs-comment">#npm install</span><br></code></pre></td></tr></table></figure><p>若是上面的命令都没报错的话，就恭喜了，运行 hexo s 命令，其中 s 是 server 的缩写，在浏览</p><p>器中输入 <a href="http://localhost:4000/">http://localhost:4000</a> 回车就能够预览效果了。</p><p><img src="D:\云原生自学\博客搭建\imgs\image-20250503225045789.png" alt="image-20250503225045789"></p><h2 id="3-加载主题"><a href="#3-加载主题" class="headerlink" title="3.加载主题"></a>3.加载主题</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">大家可以从官网下载自己喜欢的主题：https://hexo.io/themes/<br><br>我这里的主题是：https://github.com/fluid-dev/hexo-theme-fluid?tab=readme-ov-file<br><br>随后将下载的主题文件夹放在 myblog/theme 中，在 _config.yml 文件中修改theme 为hexo-theme-fluid-master(注意和主题文件名一致)<br><span class="hljs-comment">#cat _config.yml |grep theme</span><br>theme: hexo-theme-fluid-1.9.8 <br><span class="hljs-comment">#ls themes/</span><br>hexo-theme-fluid-1.9.8<br>修改好之后执行 hexo g 命令，然后再 hexo s ，在浏览器中输入 http://localhost:4000/回车就能够预览修改主题后的效果了。<br></code></pre></td></tr></table></figure><h2 id="4-将博客部署在GitHub上"><a href="#4-将博客部署在GitHub上" class="headerlink" title="4.将博客部署在GitHub上"></a>4.将博客部署在GitHub上</h2><p>点击 右上角new repository 建立一个新的仓库，注意Github 仅能使用一个同名仓库的代码托管一个静态站点，这里注意仓库名一定要是： <strong>用户名.github.io</strong>  </p><p>配置 SSH key ，要使用 git 工具首先要配置一下SSH key，为部署本地博客到 Github 作准备</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#git config --global user.name &quot;用户名&quot;                 </span><br><span class="hljs-comment">#git config --global user.email &quot;邮箱地址&quot;</span><br><span class="hljs-comment">#ssh-keygen -t rsa -C &#x27;上面的邮箱&#x27;</span><br></code></pre></td></tr></table></figure><p>按照提示完成三次回车，便可生成 ssh key，采用以下指令也可以查看自己的ssh：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#cat ~/.ssh/id_rsa.pub     #将公钥放到github上</span><br></code></pre></td></tr></table></figure><p><img src="D:\云原生自学\博客搭建\imgs\image-20250504082407372.png" alt="image-20250504082407372"></p><p>此时，本地和Github的工做作得差不了，是时候把它们两个链接起来了。你也能够查看官网的部署教程。先不着急，部署以前还须要修改配置和安装部署插件。第一：打开项目根目录下的_config.yml 配置文件配置参数。拉到文件末尾，填上以下配置。</p><p><img src="D:\云原生自学\博客搭建\imgs\image-20250504082735986.png" alt="image-20250504082735986"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#tail -n 10 myBlog/_config.yml </span><br><br>theme: hexo-theme-fluid-1.9.8 <br><br><span class="hljs-comment"># Deployment</span><br><span class="hljs-comment">## Docs: https://hexo.io/docs/one-command-deployment</span><br>url: https://www.tiantian123.asia<br>root: /<br>deploy:<br>  <span class="hljs-built_in">type</span>: <span class="hljs-string">&#x27;git&#x27;</span><br>  repo: git@github.com:lhtkk/lhtkk.github.io.git<br>  branch: master<br><br></code></pre></td></tr></table></figure><p>第二要安装一个部署插件 hexo-deployer-git，输如以下指令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#npm install hexo-deployer-git --save</span><br></code></pre></td></tr></table></figure><p>最后执行如下两条命令就能够部署上传啦，如下 g 是 generate 缩写，d 是 deploy 缩写</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo g <span class="hljs-comment"># 生成静态网站</span><br>hexo d <span class="hljs-comment"># 部署到Github上</span><br></code></pre></td></tr></table></figure><p>这时用浏览器输入 用户名.github.io 就可以访问刚才的网站啦。</p><p>md格式的文件放在根目录下 source&#x2F;_post&#x2F;  格式如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">---<br>title: istio       <span class="hljs-comment">#标题名字</span><br>tags: 云原生        <span class="hljs-comment">#标签</span><br>categories: istio  <span class="hljs-comment">#分类</span><br>---<br><br></code></pre></td></tr></table></figure><p>之后依次输入以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo g <span class="hljs-comment"># 生成文件</span><br>hexo s <span class="hljs-comment"># 本地服务器查看网站</span><br>hexo d <span class="hljs-comment"># 部署到Github 上</span><br><br>或者hexo clean; hexo g; hexo s; hexo d<br><br></code></pre></td></tr></table></figure><h2 id="5-主题优化"><a href="#5-主题优化" class="headerlink" title="5.主题优化"></a>5.主题优化</h2><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ini"><br>参考地址：https://fluid-dev.github.io/hexo-fluid-docs/guide/<span class="hljs-comment">#社交页图标</span><br><br>https://blog.kevinchu.top/2023/07/17/hexo-theme-fluid-modify/<br></code></pre></td></tr></table></figure><h2 id="6-cdn加速"><a href="#6-cdn加速" class="headerlink" title="6.cdn加速"></a>6.cdn加速</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">将/img/logo.<span class="hljs-property">png</span> 改成  <span class="hljs-attr">https</span>:<span class="hljs-comment">//cdn.jsdelivr.net/gh/lhtkk/lhtkk.github.io/img/logo.png </span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>bolg</category>
      
    </categories>
    
    
    <tags>
      
      <tag>blog</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>内网穿透</title>
    <link href="/2025/05/26/%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/"/>
    <url>/2025/05/26/%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/</url>
    
    <content type="html"><![CDATA[<h2 id="1-公网服务器（服务端s端）"><a href="#1-公网服务器（服务端s端）" class="headerlink" title="1.公网服务器（服务端s端）"></a>1.公网服务器（服务端s端）</h2><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-comment">#cat frps.ini </span><br><span class="hljs-section">[common]</span><br><span class="hljs-attr">bindPort</span> = <span class="hljs-number">7000</span><br><span class="hljs-attr">vhostHTTPPort</span> = <span class="hljs-number">8080</span> <span class="hljs-comment"># 访问公网ip跳转到 内网的哪个ip</span><br><span class="hljs-section">[ssh]</span><br><span class="hljs-attr">type</span> = tcp<br><span class="hljs-attr">remote_port</span> = <span class="hljs-number">6001</span>   <span class="hljs-comment"># 公网端口 6001，用于外部访问</span><br><span class="hljs-attr">local_ip</span> = <span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span> <span class="hljs-comment"># 本地的 SSH 地址</span><br><span class="hljs-attr">local_port</span> = <span class="hljs-number">22</span>      <span class="hljs-comment"># 内网 SSH 服务的端口（默认 22）</span><br><br>nohup ./frps -c frps.ini &amp;<br><br></code></pre></td></tr></table></figure><h3 id="1-1设置开机自启system"><a href="#1-1设置开机自启system" class="headerlink" title="1.1设置开机自启system"></a>1.1设置开机自启system</h3><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-comment">#cat /etc/systemd/system/frps.service</span><br><span class="hljs-section">[Unit]</span><br><span class="hljs-attr">Description</span>=FRP Client<br><span class="hljs-attr">After</span>=network.target<br><br><span class="hljs-section">[Service]</span><br><span class="hljs-attr">Type</span>=simple<br><span class="hljs-attr">ExecStart</span>=/root/frp/frps -c /root/frp/frps.ini<br><span class="hljs-attr">Restart</span>=<span class="hljs-literal">on</span>-failure<br><br><span class="hljs-section">[Install]</span><br><span class="hljs-attr">WantedBy</span>=multi-user.target<br><br><span class="hljs-comment">#sudo systemctl daemon-reexec</span><br><span class="hljs-comment">#sudo systemctl enable frps</span><br><span class="hljs-comment">#sudo systemctl start frps</span><br><br><span class="hljs-comment">#cat /etc/ssh/sshd_config </span><br>port 22<br>port 6001<br><span class="hljs-comment">#systemctl restart sshd</span><br></code></pre></td></tr></table></figure><h2 id="2-内网服务器（客户端c端）"><a href="#2-内网服务器（客户端c端）" class="headerlink" title="2.内网服务器（客户端c端）"></a>2.内网服务器（客户端c端）</h2><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-comment"># cat frpc.ini </span><br><span class="hljs-section">[common]</span><br><span class="hljs-attr">server_addr</span> = <span class="hljs-number">115.120</span>.<span class="hljs-number">199.168</span>  <span class="hljs-comment">#公网ip的地址</span><br><span class="hljs-attr">server_port</span> = <span class="hljs-number">7000</span> <span class="hljs-comment">#监听的端口和s端一致</span><br><br><span class="hljs-section">[http]</span><br><span class="hljs-attr">type</span> = tcp <span class="hljs-comment">#如果是域名就是http</span><br><span class="hljs-attr">local_ip</span> = <span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span><br><span class="hljs-attr">local_port</span> = <span class="hljs-number">80</span>    <span class="hljs-comment">#需要跳转到内网的ip </span><br><span class="hljs-attr">remote_port</span> = <span class="hljs-number">8080</span> <span class="hljs-comment">#公网的ip</span><br><br><span class="hljs-section">[ssh]</span><br><span class="hljs-attr">type</span> = tcp<br><span class="hljs-attr">local_ip</span> = <span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span><br><span class="hljs-attr">local_port</span> = <span class="hljs-number">22</span>    <span class="hljs-comment">#需要跳转到内网的ip</span><br><span class="hljs-attr">remote_port</span> = <span class="hljs-number">6001</span>    <span class="hljs-comment">#公网的ip</span><br><br><br>nohup ./frps -c frps.ini &amp;<br></code></pre></td></tr></table></figure><h3 id="2-1设置开机自启"><a href="#2-1设置开机自启" class="headerlink" title="2.1设置开机自启"></a>2.1设置开机自启</h3><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-comment">#cat /etc/systemd/system/frps.service</span><br><span class="hljs-section">[Unit]</span><br><span class="hljs-attr">Description</span>=FRP Client<br><span class="hljs-attr">After</span>=network.target<br><br><span class="hljs-section">[Service]</span><br><span class="hljs-attr">Type</span>=simple<br><span class="hljs-attr">ExecStart</span>=/root/frp/frps -c /root/frp/frps.ini<br><span class="hljs-attr">Restart</span>=<span class="hljs-literal">on</span>-failure<br><br><span class="hljs-section">[Install]</span><br><span class="hljs-attr">WantedBy</span>=multi-user.target<br><br><span class="hljs-comment">#sudo systemctl daemon-reexec</span><br><span class="hljs-comment">#sudo systemctl enable frps</span><br><span class="hljs-comment">#sudo systemctl start frps</span><br></code></pre></td></tr></table></figure><h2 id="3-测试"><a href="#3-测试" class="headerlink" title="3.测试"></a>3.测试</h2><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ini">curl curl 115.120.199.168:8080<br>跳转到内网的80<br>ssh -p 6001 root@115.120.199.168  密码是内网的密码<br>跳转到内网的机子上<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>网络</category>
      
    </categories>
    
    
    <tags>
      
      <tag>网络</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>k8s笔记</title>
    <link href="/2025/05/26/K8S%E7%AC%94%E8%AE%B0/"/>
    <url>/2025/05/26/K8S%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h1><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs ini">有状态  需要依赖本地的 redis mysql<br>无状态 不需要依赖本地的 nginx appach <br>java mysql 两个容易由于mysql可能会故障要重启 所以应该直接links 容器名 保持连接<br>无状态服务<br>rc(replication)  扩缩容  <br>rs(replicaset) 在rc的基础上可以选择标签<br>deployment 在rs基础上平滑扩缩容 平滑升级/回滚  暂停与恢复(比如一个地方代码想要改5处 它是自动升级的所以可以先暂停 等代码都改好了再恢复)<br>有状态服务<br>statefulset  <br>redis mysql都要基于主从所以需要按照顺序<br>稳定的持久化 基于pvc(volumeclaimtemplate) 稳定的网络标识 headless service(dns类似 服务名绑定了ip) 有序部署有序扩展  有序收缩有序删除<br>services<br>node与node的之间暴露的访问的端口<br>ingress<br>外部想要访问内部的端口<br>configmap<br>配置文件的映射<br></code></pre></td></tr></table></figure><h1 id="资源调度控制器"><a href="#资源调度控制器" class="headerlink" title="资源调度控制器"></a>资源调度控制器</h1><h2 id="pod"><a href="#pod" class="headerlink" title="pod"></a>pod</h2><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs ini">cat nginx-pod.yaml<br><br>apiVersion: v1 <span class="hljs-comment"># api 文档版本</span><br>kind: Pod  <span class="hljs-comment"># 资源对象类型，也可以配置为像Deployment、StatefulSet这一类的对象</span><br>metadata: <span class="hljs-comment"># Pod 相关的元数据，用于描述 Pod 的数据</span><br>  name: nginx-demo <span class="hljs-comment"># Pod 的名称</span><br>  labels: <span class="hljs-comment"># 定义 Pod 的标签</span><br>    type: app <span class="hljs-comment"># 自定义 label 标签，名字为 type，值为 app</span><br>    test: 1.0.0 <span class="hljs-comment"># 自定义 label 标签，描述 Pod 版本号</span><br>  namespace: &#x27;default&#x27; <span class="hljs-comment"># 命名空间的配置</span><br>spec: <span class="hljs-comment"># 期望 Pod 按照这里面的描述进行创建</span><br>  containers: <span class="hljs-comment"># 对于 Pod 中的容器描述</span><br>  - name: nginx <span class="hljs-comment"># 容器的名称</span><br>    image: nginx:1.7.9 <span class="hljs-comment"># 指定容器的镜像</span><br>    imagePullPolicy: IfNotPresent <span class="hljs-comment"># 镜像拉取策略，指定如果本地有就用本地的，如果没有就拉取远程的</span><br>    command: <span class="hljs-comment"># 指定容器启动时执行的命令</span><br>    - nginx<br>    - -g<br>    - &#x27;daemon off<span class="hljs-comment">;&#x27; # nginx -g &#x27;daemon off;&#x27;</span><br>    workingDir: /usr/share/nginx/html <span class="hljs-comment"># 定义容器启动后的工作目录</span><br>    ports:<br>    - name: http <span class="hljs-comment"># 端口名称</span><br>      containerPort: 80 <span class="hljs-comment"># 描述容器内要暴露什么端口</span><br>      protocol: TCP <span class="hljs-comment"># 描述该端口是基于哪种协议通信的</span><br>    env: <span class="hljs-comment"># 环境变量</span><br>    - name: JVM_OPTS <span class="hljs-comment"># 环境变量名称</span><br>      value: &#x27;-Xms128m -Xmx128m&#x27; <span class="hljs-comment"># 环境变量的值</span><br>    reousrces:<br>      requests: <span class="hljs-comment"># 最少需要多少资源</span><br>        cpu: 100m <span class="hljs-comment"># 限制 cpu 最少使用 0.1 个核心</span><br>        memory: 128Mi <span class="hljs-comment"># 限制内存最少使用 128兆</span><br>      limits: <span class="hljs-comment"># 最多可以用多少资源</span><br>        cpu: 200m <span class="hljs-comment"># 限制 cpu 最多使用 0.2 个核心</span><br>        memory: 256Mi <span class="hljs-comment"># 限制 最多使用 256兆</span><br>  restartPolicy: OnFailure <span class="hljs-comment"># 重启策略，只有失败的情况才会重启</span><br></code></pre></td></tr></table></figure><h2 id="Deployment"><a href="#Deployment" class="headerlink" title="Deployment"></a>Deployment</h2><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs ini">apiVersion: apps/v1 <span class="hljs-comment"># deployment api 版本</span><br>kind: Deployment <span class="hljs-comment"># 资源类型为 deployment</span><br>metadata: <span class="hljs-comment"># 元信息</span><br>  labels: <span class="hljs-comment"># 标签</span><br>    app: nginx-deploy <span class="hljs-comment"># 具体的 key: value 配置形式</span><br>  name: nginx-deploy <span class="hljs-comment"># deployment 的名字</span><br>  namespace: default <span class="hljs-comment"># 所在的命名空间</span><br>spec:<br>  replicas: 1 <span class="hljs-comment"># 期望副本数</span><br>  revisionHistoryLimit: 10 <span class="hljs-comment"># 进行滚动更新后，保留的历史版本数</span><br>  selector: <span class="hljs-comment"># 选择器，用于找到匹配的 RS</span><br>    matchLabels: <span class="hljs-comment"># 按照标签匹配</span><br>      app: nginx-deploy <span class="hljs-comment"># 匹配的标签key/value</span><br>  strategy: <span class="hljs-comment"># 更新策略</span><br>    rollingUpdate: <span class="hljs-comment"># 滚动更新配置</span><br>      maxSurge: 25% <span class="hljs-comment"># 进行滚动更新时，更新的个数最多可以超过期望副本数的个数/比例</span><br>      maxUnavailable: 25% <span class="hljs-comment"># 进行滚动更新时，最大不可用比例更新比例，表示在所有副本数中，最多可以有多少个不更新成功</span><br>    type: RollingUpdate <span class="hljs-comment"># 更新类型，采用滚动更新</span><br>  template: <span class="hljs-comment"># pod 模板</span><br>    metadata: <span class="hljs-comment"># pod 的元信息</span><br>      labels: <span class="hljs-comment"># pod 的标签</span><br>        app: nginx-deploy<br>    spec: <span class="hljs-comment"># pod 期望信息</span><br>      containers: <span class="hljs-comment"># pod 的容器</span><br>      - image: nginx:1.7.9 <span class="hljs-comment"># 镜像</span><br>        imagePullPolicy: IfNotPresent <span class="hljs-comment"># 拉取策略</span><br>        name: nginx <span class="hljs-comment"># 容器名称</span><br>      restartPolicy: Always <span class="hljs-comment"># 重启策略</span><br>      terminationGracePeriodSeconds: 30 <span class="hljs-comment"># 删除操作最多宽限多长时间</span><br><br></code></pre></td></tr></table></figure><h3 id="关于deploy"><a href="#关于deploy" class="headerlink" title="关于deploy"></a>关于deploy</h3><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs ini">kubectl scale <span class="hljs-attr">--replicas</span>=<span class="hljs-number">5</span> deploy nginx-deploy<br><span class="hljs-comment">#将副本数改成5</span><br>kubectl rollout history deploy nginx-deploy <br><span class="hljs-comment">#查看所有滚动的版本</span><br>kubectl rollout deploy nginx-deploy <span class="hljs-attr">--revision</span>=<span class="hljs-number">2</span><br><span class="hljs-comment">#查看版本2的具体信息</span><br>kubectl rollout undo  deploy nginx-deploy <span class="hljs-attr">--to-revision</span>=<span class="hljs-number">2</span><br><span class="hljs-comment">#回滚到2的版本</span><br>kubect rollout status deploy nginx-deploy<br><span class="hljs-comment">#查看回滚的状态</span><br>kubectl rollout pause deploy nginx-deploy<br><span class="hljs-comment">#暂停deployment自动更新</span><br>kubectl rollout rusume deploy nginx-deploy<br><span class="hljs-comment">#恢复deployment更新</span><br>kubectl rollout restart deploy nginx-deploy<br><span class="hljs-comment">#重新加载配置</span><br></code></pre></td></tr></table></figure><h2 id="StatefulSet"><a href="#StatefulSet" class="headerlink" title="StatefulSet"></a>StatefulSet</h2><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs ini">---<br>apiVersion: v1<br>kind: Service<br>metadata:<br>  name: nginx<br>  labels:<br>    app: nginx<br>spec:<br>  ports:<br>  - port: 80<br>    name: web<br>  clusterIP: None<br>  selector:<br>    app: nginx     <br>---<br>apiVersion: apps/v1<br>kind: StatefulSet<br>metadata:<br>  name: web<br>spec:<br>  serviceName: &quot;nginx&quot;<br>  replicas: 2<br>  selector:<br>   matchLabels:<br>    app: nginx<br>  template:<br>    metadata:<br>      labels:<br>        app: nginx<br>    spec:<br>      containers:<br>      - name: nginx<br>        image: nginx:1.2.1<br>        ports:<br>        - containerPort: 80<br>          name: web<br><br></code></pre></td></tr></table></figure><h3 id="副本扩缩容"><a href="#副本扩缩容" class="headerlink" title="副本扩缩容"></a>副本扩缩容</h3><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-comment"># 扩容</span><br>$ kubectl scale statefulset web <span class="hljs-attr">--replicas</span>=<span class="hljs-number">5</span><br><br><span class="hljs-comment"># 缩容</span><br>$ kubectl patch statefulset web -p &#x27;&#123;&quot;spec&quot;:&#123;&quot;replicas&quot;:3&#125;&#125;&#x27;<br>$ kubectl scale statefulset web <span class="hljs-attr">--replicas</span>=<span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><h3 id="更新机制"><a href="#更新机制" class="headerlink" title="更新机制"></a>更新机制</h3><h4 id="灰度发布（金丝雀）"><a href="#灰度发布（金丝雀）" class="headerlink" title="灰度发布（金丝雀）"></a>灰度发布（金丝雀）</h4><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs ini">  updateStrategy:<br>    rollingUpdate:<br>      partition: 0       <span class="hljs-comment">#改成几  大于等于的都会被更新</span><br>    type: RollingUpdate<br><br><br>利用滚动更新中的 partition 属性，可以实现简易的灰度发布的效果<br><br>例如我们有 5 个 pod，如果当前 partition 设置为 3，那么此时滚动更新时，只会更新那些 序号 &gt;= 3 的 pod<br><br>利用该机制，我们可以通过控制 partition 的值，来决定只更新其中一部分 pod，确认没有问题后再主键增大更新的 pod 数量，最终实现全部 pod 更新<br></code></pre></td></tr></table></figure><h4 id="删除更新"><a href="#删除更新" class="headerlink" title="删除更新"></a>删除更新</h4><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ini">  updateStrategy:<br>    type: OnDelete<br><br>只有在 pod 被删除时会进行更新操作<br></code></pre></td></tr></table></figure><h3 id="删除操作"><a href="#删除操作" class="headerlink" title="删除操作"></a>删除操作</h3><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-comment"># 删除 StatefulSet 和 Headless Service</span><br><span class="hljs-comment"># 级联删除：删除 statefulset 时会同时删除 pods</span><br>kubectl delete statefulset web<br><span class="hljs-comment"># 非级联删除：删除 statefulset 时不会删除 pods，删除 sts 后，pods 就没人管了，此时再删除 pod 不会重建的</span><br>kubectl deelte sts web <span class="hljs-attr">--cascade</span>=<span class="hljs-literal">false</span><br><span class="hljs-comment"># 删除 service</span><br>kubectl delete service nginx<br></code></pre></td></tr></table></figure><h2 id="Daemonset"><a href="#Daemonset" class="headerlink" title="Daemonset"></a>Daemonset</h2><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs ini">apiVersion: apps/v1<br>kind: DaemonSet<br>metadata:<br>  name: fluentd<br>spec:<br>  selector:<br>    matchLabels:<br>      id: fluentd  <span class="hljs-comment"># 选择所有标签为 id: fluentd 的 Pods</span><br>  template:<br>    metadata:<br>      labels:<br>        app: logging<br>        id: fluentd<br>      name: fluentd<br>    spec:<br>      containers:<br>      - name: fluentd-es<br>        image: agilestacks/fluentd-elasticsearch:v1.3.0<br>        env:<br>         - name: FLUENTD_ARGS<br>           value: -qq<br>        volumeMounts:<br>         - name: containers<br>           mountPath: /var/lib/docker/containers<br>         - name: varlog<br>           mountPath: /varlog<br>      volumes:<br>         - hostPath:<br>             path: /var/lib/docker/containers<br>           name: containers<br>         - hostPath:<br>             path: /var/log<br>           name: varlog<br>      nodeSelector:<br>        aa: bb     <span class="hljs-comment">#标签有 aa=bb的 自动在node节点上创建pod</span><br>        <br>更新机制最好还是OnDelet 要不然每次更新都让所有的节点更新 消耗太多的资源        <br><br>        <br> kubectl label nodes k8s-node1 <span class="hljs-attr">aa</span>=bb<br> kubectl get no -l <span class="hljs-attr">aa</span>=bb<br>NAME        STATUS   ROLES    AGE   VERSION<br>k8s-node1   Ready    &lt;none&gt;   16h   v1.23.6<br>k8s-node2   Ready    &lt;none&gt;   16h   v1.23.6<br><br></code></pre></td></tr></table></figure><h2 id="HPA"><a href="#HPA" class="headerlink" title="HPA"></a>HPA</h2><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs ini">实现 cpu 或内存的监控，首先有个前提条件是该对象必须配置了 resources.requests.cpu 或 resources.requests.memory 才可以，可以配置当 cpu/memory 达到上述配置的百分比后进行扩容或缩容<br><br>创建一个 HPA：<br>先准备一个好一个有做资源限制的 deployment<br>执行命令 kubectl autoscale deploy nginx-deploy <span class="hljs-attr">--cpu-percent</span>=<span class="hljs-number">20</span> --min=<span class="hljs-number">2</span> --max=<span class="hljs-number">5</span><br>通过 kubectl get hpa 可以获取 HPA 信息<br><br>测试：找到对应服务的 service，编写循环测试脚本提升内存与 cpu 负载<br>while true<span class="hljs-comment">; do wget -q -O- http://&lt;ip:port&gt; &gt; /dev/null ; done</span><br><br>可以通过多台机器执行上述命令，增加负载，当超过负载后可以查看 pods 的扩容情况 kubectl get pods<br><br>查看 pods 资源使用情况<br>kubectl top pods<br><br>扩容测试完成后，再关闭循环执行的指令，让 cpu 占用率降下来，然后过 5 分钟后查看自动缩容情况<br></code></pre></td></tr></table></figure><h2 id="selector和-模板中labels的关系"><a href="#selector和-模板中labels的关系" class="headerlink" title="selector和 模板中labels的关系"></a>selector和 模板中labels的关系</h2><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs ini">selector: <span class="hljs-comment"># 选择器，用于找到匹配的 RS</span><br>    matchLabels: <span class="hljs-comment"># 按照标签匹配</span><br>      app: nginx-deploy <span class="hljs-comment"># 匹配的标签key/value</span><br>  template: <span class="hljs-comment"># pod 模板</span><br>    metadata: <span class="hljs-comment"># pod 的元信息</span><br>      labels: <span class="hljs-comment"># pod 的标签</span><br>        app: nginx-deploy<br>        <br>        <br>        <br>来选择控制模板里app为 nginx-deploy的pod<br></code></pre></td></tr></table></figure><h1 id="探针"><a href="#探针" class="headerlink" title="探针"></a>探针</h1><h2 id="启动探针"><a href="#启动探针" class="headerlink" title="启动探针"></a>启动探针</h2><p>k8s 1.16 版本新增的探针，用于判断应用程序是否已经启动了。</p><p>当配置了 startupProbe 后，会先禁用其他探针，直到 startupProbe 成功后，其他探针才会继续。</p><p>作用：由于有时候不能准确预估应用一定是多长时间启动成功，因此配置另外两种方式不方便配置初始化时长来检测，而配置了 statupProbe 后，只有在应用启动成功了，才会执行另外两种探针，可以更加方便的结合使用另外两种探针使用。</p><p>检测到&#x2F;api&#x2F;startup 则表示启动了</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ini">startupProbe:<br> httpGet:<br>  path: /api/startup<br>  port: 80<br></code></pre></td></tr></table></figure><h2 id="存活探针"><a href="#存活探针" class="headerlink" title="存活探针"></a>存活探针</h2><p>用于探测容器中的应用是否运行，如果探测失败，kubelet 会根据配置的重启策略进行重启，若没有配置，默认就认为容器启动成功，不会执行重启策略。</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs ini">livenessProbe:<br> failureThreshold: 5       <span class="hljs-comment">#连续失败多少次 livenessProbe 才会触发容器重启。</span><br> httpGet:<br>  path: /health<br>  port: 8080<br>  scheme: HTTP            <span class="hljs-comment">#指定了请求使用的协议</span><br> initialDelaySeconds: 60  <span class="hljs-comment">#表示在容器启动后，Kubernetes 会等待 60 秒后才开始执行 livenessProbe。这通常用于等待容器的服                            务完全启动并能够响应健康检查。</span><br> periodSeconds: 10        <span class="hljs-comment">#表示每10秒执行一次 livenessProbe 检查</span><br> successThreshold: 1      <span class="hljs-comment">#表示容器只需要一次成功的 livenessProbe 检查，就被认为是健康的</span><br> timeoutSeconds: 5        <span class="hljs-comment">#表示如果 livenessProbe 请求在 5 秒内没有得到响应，则该检查会被认为失败</span><br></code></pre></td></tr></table></figure><h2 id="就绪探针"><a href="#就绪探针" class="headerlink" title="就绪探针"></a>就绪探针</h2><p>用于探测容器内的程序是否健康，它的返回值如果返回 success，那么就认为该容器已经完全启动，并且该容器是可以接收外部流量的。</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs ini">readinessProbe:<br>  failureThreshold: 3 <span class="hljs-comment"># 错误次数</span><br>  httpGet:<br>    path: /ready<br>    port: 8181<br>    scheme: HTTP<br>  periodSeconds: 10 <span class="hljs-comment"># 间隔时间</span><br>  successThreshold: 1<br>  timeoutSeconds: 1<br></code></pre></td></tr></table></figure><h1 id="探测方式"><a href="#探测方式" class="headerlink" title="探测方式"></a>探测方式</h1><h2 id="ExecAction（命令方式）"><a href="#ExecAction（命令方式）" class="headerlink" title="ExecAction（命令方式）"></a>ExecAction（命令方式）</h2><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs INI">在容器内部执行一个命令，如果返回值为 0，则任务容器时健康的。<br><br>livenessProbe:<br>  exec:<br>    command:<br>      - cat<br>      - /health<br></code></pre></td></tr></table></figure><h2 id="TCPSocketAction（tcp方式）"><a href="#TCPSocketAction（tcp方式）" class="headerlink" title="TCPSocketAction（tcp方式）"></a>TCPSocketAction（tcp方式）</h2><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs INI">通过 tcp 连接监测容器内端口是否开放，如果开放则证明该容器健康<br><br>livenessProbe:<br>  tcpSocket:<br>    port: 80<br></code></pre></td></tr></table></figure><h2 id="HTTPGetAction（http方式）"><a href="#HTTPGetAction（http方式）" class="headerlink" title="HTTPGetAction（http方式）"></a>HTTPGetAction（http方式）</h2><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs INI">生产环境用的较多的方式，发送 HTTP 请求到容器内的应用程序，如果接口返回的状态码在 200~400 之间，则认为容器健康。<br><br>livenessProbe:<br>  failureThreshold: 5<br>  httpGet:<br>    path: /health<br>    port: 8080<br>    scheme: HTTP<br>    httpHeaders:<br>      - name: xxx<br>        value: xxx<br></code></pre></td></tr></table></figure><h1 id="Service"><a href="#Service" class="headerlink" title="Service"></a>Service</h1><p><img src="C:\Users\刘惠涛\Desktop\叩丁狼-k8s\images\1742199651816.png" alt="1742199651816"></p><h2 id="Endpoints-实现容器地址转发可以用于项目迁移"><a href="#Endpoints-实现容器地址转发可以用于项目迁移" class="headerlink" title="Endpoints 实现容器地址转发可以用于项目迁移"></a>Endpoints 实现容器地址转发可以用于项目迁移</h2><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs ini">可以通过ip访问<br>kubectl exec -it busybox -- sh<br>wget nginx-svc1<br><br>先创建一个svc把标签选择给删了 <br><span class="hljs-comment">#cat nginx-svc.yaml</span><br>apiVersion: v1<br>kind: Service<br>metadata:<br>  name: nginx-svc1<br>  labels:<br>    app: nginxep<br>spec:<br>  ports:<br>  - port: 80<br>    name: web<br>    targetPort: 80<br>  此时svc  有但是ep是没有显示的<br>  <br><span class="hljs-comment">#cat nginx-svc-ep.yaml</span><br>apiVersion: v1<br>kind: Endpoints<br>metadata:<br>  labels:<br>    app: nginxep <span class="hljs-comment"># 与 service 一致</span><br>  name: nginx-svc1 <span class="hljs-comment"># 与 service 一致</span><br>subsets:<br>- addresses:<br>  - ip: 120.78.159.117 <span class="hljs-comment"># 目标 ip 地址</span><br>  ports: <span class="hljs-comment"># 与 service 一致</span><br>  - name: web <br>    port: 80<br>    protocol: TCP<br> <br> 此时ep就相当于一个代理代理到了120.78.159.117这个ip<br></code></pre></td></tr></table></figure><h2 id="ClusterIP-容器内部访问"><a href="#ClusterIP-容器内部访问" class="headerlink" title="ClusterIP 容器内部访问"></a>ClusterIP 容器内部访问</h2><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-comment"># kubectl get svc</span><br>NAME             TYPE           CLUSTER-IP      EXTERNAL-IP       PORT(S)   AGE<br>nginx            ClusterIP      10.104.207.42   &lt;none&gt;            80/TCP    36m<br><br>apiVersion: v1<br>kind: Service<br>metadata:<br>  name: nginx<br>  labels:<br>    app: nginx<br>spec:<br>  ports:<br>  - port: 80<br>    name: web<br>    targetPort: 80<br>  type: ClusterIP <br>  selector:<br>    app: nginx-deploy<br>集群内部访问<br></code></pre></td></tr></table></figure><h2 id="ExternalName（反向代理外部域名）"><a href="#ExternalName（反向代理外部域名）" class="headerlink" title="ExternalName（反向代理外部域名）"></a>ExternalName（反向代理外部域名）</h2><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs ini">可以通过域名访问<br>kubectl exec -it busybox -- sh<br>wget nginx-extelner<br><span class="hljs-comment"># kubectl get svc</span><br>NAME             TYPE           CLUSTER-IP      EXTERNAL-IP       PORT(S)   AGE<br>nginx-extelner   ExternalName   &lt;none&gt;          www.wolfcode.cn   80/TCP    10m<br><br>apiVersion: v1<br>kind: Service<br>metadata:<br>  name: nginx-extelner<br>  labels:<br>    app: nginx<br>spec:<br>  ports:<br>  - port: 80<br>    name: web<br>    targetPort: 80<br>  type: ExternalName <br>  externalName: www.wolfcode.cn<br><br></code></pre></td></tr></table></figure><h2 id="NodePort-端口映射"><a href="#NodePort-端口映射" class="headerlink" title="NodePort(端口映射)"></a>NodePort(端口映射)</h2><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs ini">可以对外访问 192.168.85.128:32237<br><span class="hljs-comment"># kubectl get svc</span><br>NAME             TYPE           CLUSTER-IP       EXTERNAL-IP       PORT(S)        AGE<br>nginx-svc        NodePort       10.108.184.225   &lt;none&gt;            80:32237/TCP   74s<br><br><span class="hljs-comment"># kubectl get ep</span><br>NAME         ENDPOINTS                       AGE<br>nginx-svc    10.244.1.49:80,10.244.2.63:80   83s<br><br>apiVersion: v1<br>kind: Service<br>metadata:<br>  name: nginx-svc<br>  labels:<br>    app: nginx<br>spec:<br>  ports:<br>  - port: 80<br>    name: web<br>    targetPort: 80<br>  type: NodePort<br>  selector:<br>    app: nginx-deploy<br><br></code></pre></td></tr></table></figure><h2 id="Ingress"><a href="#Ingress" class="headerlink" title="Ingress"></a>Ingress</h2><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs ini">可以基于url对外访问<br>apiVersion: networking.k8s.io/v1<br>kind: Ingress <span class="hljs-comment"># 资源类型为 Ingress</span><br>metadata:<br>  name: nginx-ingress<br>  annotations:<br>    kubernetes.io/ingress.class: &quot;nginx&quot;<br>    <span class="hljs-comment">#nginx.ingress.kubernetes.io/rewrite-target: /</span><br>spec:<br>  rules: <span class="hljs-comment"># ingress 规则配置，可以配置多个</span><br>  - host: k8s.ingress.cn <span class="hljs-comment"># 域名配置，可以使用通配符 *</span><br>    http:<br>      paths: <span class="hljs-comment"># 相当于 nginx 的 location 配置，可以配置多个</span><br>      - pathType: Exact <span class="hljs-comment"># 路径类型，按照路径类型进行匹配 ImplementationSpecific 需要指定 IngressClass，具体匹配规则以 IngressClass 中的规则为准。Exact：精确匹配，URL需要与path完全匹配上，且区分大小写的。Prefix：以 / 作为分隔符来进行前缀匹配</span><br>        backend:<br>          service: <br>            name: nginx-svc <span class="hljs-comment"># 代理到哪个 service</span><br>            port: <br>              number: 80 <span class="hljs-comment"># service 的端口</span><br>        path: /api <span class="hljs-comment"># 等价于 nginx 中的 location 的路径前缀匹配</span><br>      - pathType: Prefix <span class="hljs-comment"># 路径类型，按照路径类型进行匹配 ImplementationSpecific 需要指定 IngressClass，具体匹配规则以 IngressClass 中的规则为准。Exact：精确匹配&gt;，URL需要与path完全匹配上，且区分大小写的。Prefix：以 / 作为分隔符来进行前缀匹配</span><br>        backend:<br>          service:<br>            name: nginx-svc <span class="hljs-comment"># 代理到哪个 service</span><br>            port:<br>              number: 80 <span class="hljs-comment"># service 的端口</span><br>        path: /<br><br><br>访问k8s.ingress.cn/api 能到nginx下面的api Exact永远优秀按匹配<br></code></pre></td></tr></table></figure><h1 id="配置管理"><a href="#配置管理" class="headerlink" title="配置管理"></a>配置管理</h1><h2 id="configmap"><a href="#configmap" class="headerlink" title="configmap"></a>configmap</h2><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs INI">首先创建一个cm    可以看kubectl create cm -h<br><br>apiVersion: apps/v1<br>kind: Deployment<br>metadata:<br>  labels:<br>    app: nginx-deploy<br>  name: nginx-deploy<br>spec:<br>  replicas: 1<br>  revisionHistoryLimit: 10<br>  selector:<br>    matchLabels:<br>      app: nginx-deploy<br>  strategy:<br>    rollingUpdate:<br>      maxSurge: 25%<br>      maxUnavailable: 25%<br>    type: RollingUpdate<br>  template:<br>    metadata:<br>      labels:<br>        app: nginx-deploy<br>    spec:<br>      initContainers:          <span class="hljs-comment">#初始化的操作</span><br>        - name: init-nginx<br>          image: busybox<br>          command: <span class="hljs-section">[&quot;sh&quot;, &quot;-c&quot;, &quot;mkdir -p /usr/share/nginx/api&quot;]</span> <br>      containers:<br>        - image: nginx:latest<br>          imagePullPolicy: IfNotPresent<br>          name: nginx<br>          volumeMounts:<br>            - name: nginx-default-config  <span class="hljs-comment">#需要和哪个cm绑定</span><br>              mountPath: /etc/nginx/conf.d/default.conf<br>              subPath: default.conf  <span class="hljs-comment"># 使得 ConfigMap 中的文件被挂载为 default.conf</span><br>            - name: nginx-default-config2<br>              mountPath: /usr/share/nginx/api/index.html <br>              subPath: index.html  <span class="hljs-comment"># 使得 ConfigMap 中的文件被挂载为 index.html</span><br>      restartPolicy: Always<br>      terminationGracePeriodSeconds: 30<br>      volumes:<br>        - name: nginx-default-config   <span class="hljs-comment">#需要和哪个cm绑定</span><br>          configMap:<br>            name: nginx-default-configmap <span class="hljs-comment"># 引用创建的 ConfigMap的name</span><br>        - name: nginx-default-config2<br>          configMap:<br>            name: nginx-index-config  <span class="hljs-comment"># 引用创建的 ConfigMap的name</span><br> <br> <br> 这样就可以实现在外面更改配置文件和index了<br> 重新加载操作 kubectl rollout restart deploy deploy-nginx<br></code></pre></td></tr></table></figure><h1 id="持久化存储"><a href="#持久化存储" class="headerlink" title="持久化存储"></a>持久化存储</h1><h2 id="volumes"><a href="#volumes" class="headerlink" title="volumes"></a>volumes</h2><h3 id="hostpath（挂载到本机）"><a href="#hostpath（挂载到本机）" class="headerlink" title="hostpath（挂载到本机）"></a>hostpath（挂载到本机）</h3><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs ini">apiVersion: v1<br>kind: Pod<br>metadata:<br>  name: test-pd<br>spec:<br>  containers:<br>  - image: nginx:latest<br>    name: nginx-volume<br>    volumeMounts:<br>    - mountPath: /usr/share/nginx/html/index.html <span class="hljs-comment"># 挂载到容器的哪个文件</span><br>      name: test-volume <span class="hljs-comment"># 挂载哪个 volume</span><br>  volumes:<br>  - name: test-volume<br>    hostPath:<br>      path: /tmp/index.html <span class="hljs-comment"># 节点中的文件</span><br>      type: FileOrCreate <span class="hljs-comment"># 检查类型，在挂载前对挂载目录做什么检查操作，有多种选项，默认为空字符串，不做任何检查</span><br>      <br>      <br> 类型：<br>空字符串：默认类型，不做任何检查<br>DirectoryOrCreate：如果给定的 path 不存在，就创建一个 755 的空目录<br>Directory：这个目录必须存在<br>FileOrCreate：如果给定的文件不存在，则创建一个空文件，权限为 644<br>File：这个文件必须存在<br>Socket：UNIX 套接字，必须存在<br>CharDevice：字符设备，必须存在<br>BlockDevice：块设备，必须存在<br></code></pre></td></tr></table></figure><h3 id="emptydir（）空目录"><a href="#emptydir（）空目录" class="headerlink" title="emptydir（）空目录"></a>emptydir（）空目录</h3><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs ini">apiVersion: v1<br>kind: Pod<br>metadata:<br>  name: test-pd<br>spec:<br>  containers:<br>  - image: nginx<br>    name: nginx-emptydir<br>    volumeMounts:<br>    - mountPath: /cache   <span class="hljs-comment"># 将 Volume 挂载到容器内的路径 /cache</span><br>      name: cache-volume  <span class="hljs-comment"># 使用的 Volume 名称</span><br>  volumes:<br>  - name: cache-volume   <span class="hljs-comment"># 定义的 Volume 名称</span><br>    emptyDir: &#123;&#125;          <span class="hljs-comment"># emptyDir 类型的 Volume</span><br>    <br>    <br>emptyDir 的特点：<br>emptyDir 是一种空目录，生命周期与 Pod 绑定。<br>在容器启动时，Kubernetes 会在节点上为 Pod 创建一个空的目录，并将该目录挂载到容器的指定路径。<br>如果 Pod 中的容器写入文件，它们会被写入 emptyDir，并且这个文件对于 Pod 中所有容器是共享的。<br>当 Pod 被删除时，emptyDir 中的内容也会丢失。<br>emptyDir 不适合长期存储数据，因为它不会在 Pod 重启或删除后保留数据。<br><br></code></pre></td></tr></table></figure><h2 id="nfs方式"><a href="#nfs方式" class="headerlink" title="nfs方式"></a>nfs方式</h2><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs ini">apiVersion: v1<br>kind: Pod<br>metadata:<br>  name: nfs-pd<br>spec:<br>  containers:<br>  - image: nginx:latest<br>    name: test-container1<br>    volumeMounts:<br>    - mountPath: /usr/share/nginx/html/<br>      name: test-volume<br>  volumes:<br>  - name: test-volume<br>    nfs:<br>      server: 192.168.85.130 <span class="hljs-comment"># 网络存储服务地址</span><br>      path: /data/nfs/rw/a <span class="hljs-comment"># 网络存储路径</span><br>      readOnly: false <span class="hljs-comment"># 是否只读</span><br></code></pre></td></tr></table></figure><h2 id="pv与pvc"><a href="#pv与pvc" class="headerlink" title="pv与pvc"></a>pv与pvc</h2><h3 id="静态构建"><a href="#静态构建" class="headerlink" title="静态构建"></a>静态构建</h3><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs ini">先创建一个pv<br>apiVersion: v1<br>kind: PersistentVolume<br>metadata:<br>  name: pv001<br>spec:<br>  capacity:<br>    storage: 5Gi <span class="hljs-comment"># pv 的容量</span><br>  volumeMode: Filesystem <span class="hljs-comment"># 存储类型为文件系统</span><br>  accessModes: <span class="hljs-comment"># 访问模式：ReadWriteOnce、ReadWriteMany、ReadOnlyMany</span><br>    - ReadWriteOnce <span class="hljs-comment"># 可被单节点独写</span><br>  persistentVolumeReclaimPolicy: Recycle <span class="hljs-comment"># 回收策略</span><br>  storageClassName: test <span class="hljs-comment"># 创建 PV 的存储类名，需要与 pvc 的相同</span><br>  mountOptions: <span class="hljs-comment"># 加载配置</span><br>    - hard<br>    - <span class="hljs-attr">nfsvers</span>=<span class="hljs-number">4.1</span><br>  nfs: <span class="hljs-comment"># 连接到 nfs</span><br>    path: /data/nfs/rw/pvc <span class="hljs-comment"># 存储路径</span><br>    server: 192.168.85.130 <span class="hljs-comment"># nfs 服务地址</span><br>-----------------------------<br>-----------------------------<br>再创建一个pvc<br>apiVersion: v1<br>kind: PersistentVolumeClaim<br>metadata:<br>  name: nfs-pvc<br>spec:<br>  accessModes:<br>    - ReadWriteOnce <span class="hljs-comment"># 权限需要与对应的 pv 相同</span><br>  volumeMode: Filesystem<br>  resources:<br>    requests:<br>      storage: 1Gi <span class="hljs-comment"># 资源可以小于 pv 的，但是不能大于，如果大于就会匹配不到 pv</span><br>  storageClassName: test<br>-----------------------------<br>-----------------------------<br>此时pvc和pv已经绑定好了<br>再创建一个pod与pvc关联<br>apiVersion: v1<br>kind: Pod<br>metadata:<br>  name: pvc-test <br>spec:<br>  containers:<br>  - image: nginx:latest<br>    name: test-container1<br>    volumeMounts:<br>    - mountPath: /tmp/pvc <br>      name: nfs-pvc-test<br>  volumes:<br>  - name: nfs-pvc-test<br>    persistentVolumeClaim:<br>      claimName: nfs-pvc <span class="hljs-comment"># pvc 的名称</span><br><br></code></pre></td></tr></table></figure><h3 id="动态构建"><a href="#动态构建" class="headerlink" title="动态构建"></a>动态构建</h3><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br></pre></td><td class="code"><pre><code class="hljs ini">vim rbac.yaml<br>apiVersion: v1<br>kind: ServiceAccount<br>metadata:<br>  name: nfs-client-provisioner<br>  <span class="hljs-comment"># replace with namespace where provisioner is deployed</span><br>  namespace: default        <span class="hljs-comment">#根据实际环境设定namespace,下面类同</span><br>---<br>kind: ClusterRole<br>apiVersion: rbac.authorization.k8s.io/v1<br>metadata:<br>  name: nfs-client-provisioner-runner<br>rules:<br>  - apiGroups: <span class="hljs-section">[&quot;&quot;]</span><br>    resources: <span class="hljs-section">[&quot;persistentvolumes&quot;]</span><br>    verbs: <span class="hljs-section">[&quot;get&quot;, &quot;list&quot;, &quot;watch&quot;, &quot;create&quot;, &quot;delete&quot;]</span><br>  - apiGroups: <span class="hljs-section">[&quot;&quot;]</span><br>    resources: <span class="hljs-section">[&quot;persistentvolumeclaims&quot;]</span><br>    verbs: <span class="hljs-section">[&quot;get&quot;, &quot;list&quot;, &quot;watch&quot;, &quot;update&quot;]</span><br>  - apiGroups: <span class="hljs-section">[&quot;storage.k8s.io&quot;]</span><br>    resources: <span class="hljs-section">[&quot;storageclasses&quot;]</span><br>    verbs: <span class="hljs-section">[&quot;get&quot;, &quot;list&quot;, &quot;watch&quot;]</span><br>  - apiGroups: <span class="hljs-section">[&quot;&quot;]</span><br>    resources: <span class="hljs-section">[&quot;events&quot;]</span><br>    verbs: <span class="hljs-section">[&quot;create&quot;, &quot;update&quot;, &quot;patch&quot;]</span><br>---<br>kind: ClusterRoleBinding<br>apiVersion: rbac.authorization.k8s.io/v1<br>metadata:<br>  name: run-nfs-client-provisioner<br>subjects:<br>  - kind: ServiceAccount<br>    name: nfs-client-provisioner<br>    <span class="hljs-comment"># replace with namespace where provisioner is deployed</span><br>    namespace: default<br>roleRef:<br>  kind: ClusterRole<br>  name: nfs-client-provisioner-runner<br>  apiGroup: rbac.authorization.k8s.io<br>---<br>kind: Role<br>apiVersion: rbac.authorization.k8s.io/v1<br>metadata:<br>  name: leader-locking-nfs-client-provisioner<br>    <span class="hljs-comment"># replace with namespace where provisioner is deployed</span><br>  namespace: default<br>rules:<br>  - apiGroups: <span class="hljs-section">[&quot;&quot;]</span><br>    resources: <span class="hljs-section">[&quot;endpoints&quot;]</span><br>    verbs: <span class="hljs-section">[&quot;get&quot;, &quot;list&quot;, &quot;watch&quot;, &quot;create&quot;, &quot;update&quot;, &quot;patch&quot;]</span><br>---<br>kind: RoleBinding<br>apiVersion: rbac.authorization.k8s.io/v1<br>metadata:<br>  name: leader-locking-nfs-client-provisioner<br>subjects:<br>  - kind: ServiceAccount<br>    name: nfs-client-provisioner<br>    <span class="hljs-comment"># replace with namespace where provisioner is deployed</span><br>    namespace: default<br>roleRef:<br>  kind: Role<br>  name: leader-locking-nfs-client-provisioner<br>  apiGroup: rbac.authorization.k8s.io<br><br><br>3、创建sc<br>apiVersion: storage.k8s.io/v1<br>kind: StorageClass<br>metadata:<br>  name: managed-nfs-storage<br>provisioner: tigerfive-nfs-storage <span class="hljs-comment">#这里的名称要和provisioner配置文件中的环境变量PROVISIONER_NAME保持一致</span><br>parameters:  <br>  archiveOnDelete: &quot;false&quot;<br><br><br>4、创建 提供者<br>apiVersion: apps/v1<br>kind: Deployment<br>metadata:<br>  name: nfs-client-provisioner<br>  labels:<br>    app: nfs-client-provisioner<br>  <span class="hljs-comment"># replace with namespace where provisioner is deployed</span><br>  namespace: default  <span class="hljs-comment">#与RBAC文件中的namespace保持一致</span><br>spec:<br>  replicas: 1<br>  selector:<br>    matchLabels:<br>      app: nfs-client-provisioner<br>  strategy:<br>    type: Recreate<br>  selector:<br>    matchLabels:<br>      app: nfs-client-provisioner<br>  template:<br>    metadata:<br>      labels:<br>        app: nfs-client-provisioner<br>    spec:<br>      serviceAccountName: nfs-client-provisioner<br>      containers:<br>        - name: nfs-client-provisioner<br>          image: registry.cn-beijing.aliyuncs.com/pylixm/nfs-subdir-external-provisioner:v4.0.0<br>          volumeMounts:<br>            - name: nfs-client-root<br>              mountPath: /persistentvolumes<br>          env:<br>            - name: PROVISIONER_NAME<br>              value: tigerfive-nfs-storage  <span class="hljs-comment">#provisioner名称,请确保该名称与 nfs-StorageClass.yaml文件中的provisioner名称保持一致</span><br>            - name: NFS_SERVER<br>              value: 192.168.81.140   <span class="hljs-comment">#NFS Server IP地址</span><br>            - name: NFS_PATH  <br>              value: /data/nfs   <span class="hljs-comment">#NFS挂载卷</span><br>      volumes:<br>        - name: nfs-client-root<br>          nfs:<br>            server: 192.168.81.140  <span class="hljs-comment">#NFS Server IP地址</span><br>            path: /data/nfs     <span class="hljs-comment">#NFS 挂载卷</span><br><br><br>--------------------------------------------------------<br><span class="hljs-comment"># kubectl get pv</span><br>No resources found<br><span class="hljs-comment"># kubectl get pvc</span><br>No resources found<br><br>直接创建pvc，并且pod使用该pvc<br><br>apiVersion: v1<br>kind: PersistentVolumeClaim<br>metadata:<br>  name: test-claim<br>  annotations:<br>    volume.beta.kubernetes.io/storage-class: &quot;managed-nfs-storage&quot;   <span class="hljs-comment">#与nfs-StorageClass.yaml metadata.name保持一致</span><br>spec:<br>  accessModes:<br>    - ReadWriteMany<br>  resources:<br>    requests:<br>      storage: 1Mi<br><br><br><span class="hljs-comment"># kubectl get pv</span><br>NAME                                       CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS   CLAIM                STORAGECLASS          REASON   AGE<br>pvc-fd443294-78e7-40ba-a27a-1d000ab92d2c   1Mi        RWX            Delete           Bound    default/test-claim   managed-nfs-storage            27s<br><span class="hljs-comment"># kubectl get pvc</span><br>NAME         STATUS   VOLUME                                     CAPACITY   ACCESS MODES   STORAGECLASS          AGE<br>test-claim   Bound    pvc-fd443294-78e7-40ba-a27a-1d000ab92d2c   1Mi        RWX            managed-nfs-storage   28s<br><br><br>创建pod使用svc<br>kind: Pod<br>apiVersion: v1<br>metadata:<br>  name: test-pod<br>spec:<br>  containers:<br>  - name: test-pod<br>    image: busybox:1.24<br>    command:<br>      - &quot;/bin/sh&quot;<br>    args:<br>      - &quot;-c&quot;<br>      - &quot;touch /mnt/SUCCESS &amp;&amp; exit 0 || exit 1&quot;   <span class="hljs-comment">#创建一个SUCCESS文件后退出</span><br>    volumeMounts:<br>      - name: nfs-pvc<br>        mountPath: &quot;/mnt&quot;<br>  restartPolicy: &quot;Never&quot;<br>  volumes:<br>    - name: nfs-pvc<br>      persistentVolumeClaim:<br>        claimName: test-claim  <span class="hljs-comment">#与PVC名称保持一致</span><br><br><br>检查nfs的目录<br><span class="hljs-section">[root@storage1 ~]</span><span class="hljs-comment"># ls /data/nfs/default-test-claim-pvc-fd443294-78e7-40ba-a27a-1d000ab92d2c/</span><br>SUCCESS<br><br></code></pre></td></tr></table></figure><h1 id="高级调度"><a href="#高级调度" class="headerlink" title="高级调度"></a>高级调度</h1><h2 id="定时任务cronjob"><a href="#定时任务cronjob" class="headerlink" title="定时任务cronjob"></a>定时任务cronjob</h2><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs ini">apiVersion: batch/v1<br>kind: CronJob<br>metadata:<br>  name: hello<br>spec:<br>  concurrencyPolicy: Allow <span class="hljs-comment"># 并发调度策略：Allow 允许并发调度，Forbid：不允许并发执行，Replace：如果之前的任务还没执行完，就直接执行新的，放弃上一个任务</span><br>  failedJobsHistoryLimit: 1 <span class="hljs-comment"># 保留多少个失败的任务</span><br>  successfulJobsHistoryLimit: 3 <span class="hljs-comment"># 保留多少个成功的任务</span><br>  suspend: false <span class="hljs-comment"># 是否挂起任务，若为 true 则该任务不会执行</span><br><span class="hljs-comment">#  startingDeadlineSeconds: 30 # 间隔多长时间检测失败的任务并重新执行，时间不能小于 10</span><br>  schedule: &quot;* * * * *&quot; <span class="hljs-comment"># 调度策略</span><br>  jobTemplate:<br>    spec:<br>      template:<br>        spec:<br>          containers:<br>          - name: hello<br>            image: busybox:latest<br>            imagePullPolicy: IfNotPresent<br>            command:<br>            - /bin/sh<br>            - -c<br>            - date<span class="hljs-comment">; echo Hello from the Kubernetes cluster</span><br>          restartPolicy: OnFailure   <span class="hljs-comment">#失败则重启（非0）</span><br><br></code></pre></td></tr></table></figure><h2 id="初始化容器"><a href="#初始化容器" class="headerlink" title="初始化容器"></a>初始化容器</h2><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs ini">在真正的容器启动之前，先启动 InitContainer，在初始化容器中完成真实容器所需的初始化操作，完成后再启动真实的容器。<br><br>相对于 postStart 来说，首先 InitController 能够保证一定在 EntryPoint 之前执行，而 postStart 不能，其次 postStart 更适合去执行一些命令操作，而 InitController 实际就是一个容器，可以在其他基础容器环境下执行更复杂的初始化功能。<br><br>在 pod 创建的模板中配置 initContainers 参数：<br>spec:<br>  initContainers:<br>  - image: nginx<br>    imagePullPolicy: IfNotPresent<br>    command: <span class="hljs-section">[&quot;sh&quot;, &quot;-c&quot;, &quot;echo &#x27;inited;&#x27; &gt;&gt; ~/.init&quot;]</span><br>    name: init-test<br>    <br>    <br>    <br>    初始化的话做好配合持久化存储 pod中的两个容器默认不会共享数据<br></code></pre></td></tr></table></figure><h2 id="容忍和污点"><a href="#容忍和污点" class="headerlink" title="容忍和污点"></a>容忍和污点</h2><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs ini"> NoSchedule 不能容忍但是已经部署在pod不会被删除   NoExecute 可以容忍但是没有对应的id或者 id和value 会被删除<br> <br> <span class="hljs-comment">#kubectl describe no k8s-node2 #查看污点</span><br> 首先创建个标签<br> <span class="hljs-comment">#kubctl  label no k8s-node2  memory=low     如果有就--overwrite</span><br> 给节点打上污点<br> <span class="hljs-comment">#kubectl taint no k8s-node2  memory=log:NoSchedule    </span><br> <br> <span class="hljs-comment"># pod 的 spec 下面配置容忍</span><br>tolerations:<br>- key: &quot;memory&quot;<br>  value: &quot;low&quot;<br>  effect: &quot;NoSchedule&quot; <span class="hljs-comment"># 能容忍的污点</span><br>  operator: &quot;Equal&quot; <span class="hljs-comment"># 表是 value 与污点的 value 要相等，也可以设置为 Exists 表示存在 key 即可，此时可以不配置 value</span><br>  <br></code></pre></td></tr></table></figure><h2 id="亲和信"><a href="#亲和信" class="headerlink" title="亲和信"></a>亲和信</h2><h3 id="node"><a href="#node" class="headerlink" title="node"></a>node</h3><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs ini">apiVersion: v1<br>kind: Pod<br>metadata:<br>  name: with-node-affinity<br>spec:<br>  affinity: <span class="hljs-comment"># 亲和力配置</span><br>    nodeAffinity: <span class="hljs-comment"># 节点亲和力</span><br>      requiredDuringSchedulingIgnoredDuringExecution: <span class="hljs-comment"># 节点必须匹配下方配置</span><br>        nodeSelectorTerms: <span class="hljs-comment"># 选择器</span><br>        - matchExpressions: <span class="hljs-comment"># 匹配表达式</span><br>          - key: test <span class="hljs-comment"># 匹配 label 的 key</span><br>            operator: In <span class="hljs-comment"># 匹配方式，只要匹配成功下方的一个 value 即可</span><br>            values:<br>            - &quot;1&quot; <span class="hljs-comment"># 匹配的 value</span><br>      preferredDuringSchedulingIgnoredDuringExecution: <span class="hljs-comment"># 节点尽量匹配下方配置</span><br>      - weight: 1 <span class="hljs-comment"># 权重[1,100]，按照匹配规则对所有节点累加权重，最终之和会加入优先级评分，优先级越高被调度的可能性越高</span><br>        preference:<br>          matchExpressions: <span class="hljs-comment"># 匹配表达式</span><br>          - key: cpu <span class="hljs-comment"># label 的 key</span><br>            operator: In <span class="hljs-comment"># 匹配方式，满足一个即可</span><br>            values:<br>            - good <span class="hljs-comment"># 匹配的 value</span><br>  containers:<br>  - name: with-node-affinity<br>    image: nginx:1.2.1 <br>    imagePullPolicy: IfNotPresent <br>    <br></code></pre></td></tr></table></figure><h3 id="pod-1"><a href="#pod-1" class="headerlink" title="pod"></a>pod</h3><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs ini">apiVersion: v1<br>kind: Pod<br>metadata:<br>  name: with-pod-affinity<br>spec:<br>  affinity: <span class="hljs-comment"># 亲和力配置</span><br>    podAffinity: <span class="hljs-comment"># pod 亲和力配置</span><br>      requiredDuringSchedulingIgnoredDuringExecution: <span class="hljs-comment"># 当前 pod 必须匹配到对应条件 pod 所在的 node 上</span><br>      - labelSelector: <span class="hljs-comment"># 标签选择器</span><br>          matchExpressions: <span class="hljs-comment"># 匹配表达式</span><br>          - key: security <span class="hljs-comment"># 匹配的 key</span><br>            operator: In <span class="hljs-comment"># 匹配方式</span><br>            values: <span class="hljs-comment"># 匹配其中的一个 value</span><br>            - S1<br>        topologyKey: topology.kubernetes.io/zone<br>    podAntiAffinity: <span class="hljs-comment"># pod 反亲和力配置</span><br>      preferredDuringSchedulingIgnoredDuringExecution: <span class="hljs-comment"># 尽量不要将当前节点部署到匹配下列参数的 pod 所在的 node 上</span><br>      - weight: 100 <span class="hljs-comment"># 权重</span><br>        podAffinityTerm: <span class="hljs-comment"># pod 亲和力配置条件</span><br>          labelSelector: <span class="hljs-comment"># 标签选择器</span><br>            matchExpressions: <span class="hljs-comment"># 匹配表达式</span><br>            - key: security <span class="hljs-comment"># 匹配的 key</span><br>              operator: In <span class="hljs-comment"># 匹配的方式</span><br>              values:<br>              - S2 <span class="hljs-comment"># 匹配的 value</span><br>          topologyKey: topology.kubernetes.io/zone<br>  containers:<br>  - name: with-pod-affinity<br>    image: pause:2.0<br></code></pre></td></tr></table></figure><h1 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h1><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs ini">kubectl delete pods --all  --force <span class="hljs-attr">--grace-period</span>=<span class="hljs-number">0</span><br><span class="hljs-comment">#强制删除所有pod</span><br>kubectl label po nginx <span class="hljs-attr">app</span>=hello<br><span class="hljs-comment">#临时创建标签</span><br>kubectl label po nginx <span class="hljs-attr">app</span>=hello2 --overwrite<br><span class="hljs-comment">#给标签重命名</span><br>kubectl label po nginx --show-labels<br><span class="hljs-comment">#查看标签</span><br>kubectl get po -A -l <span class="hljs-attr">app</span>=hello<br><span class="hljs-comment">#按照标签查找所匹配的pod</span><br>kubectl get po -A -l &#x27;k8s-app in (metrics-server, kubernetes-dashboard)&#x27;<br><span class="hljs-comment">#匹配多个值</span><br>kubectl get po -l version!=1,<span class="hljs-attr">app</span>=nginx<br><span class="hljs-comment">#查找 version!=1 and app=nginx 的 pod 信息</span><br>kubectl get po -A -l version!=1,&#x27;app in (busybox, nginx)&#x27;<br><span class="hljs-comment">#不等值 + 语句</span><br>kubectl run -i --tty --image busybox dns-test <span class="hljs-attr">--restart</span>=Never --rm /bin/sh 跑busybox不退出<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>k8s</category>
      
    </categories>
    
    
    <tags>
      
      <tag>k8s</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CICD</title>
    <link href="/2025/04/25/CICD/"/>
    <url>/2025/04/25/CICD/</url>
    
    <content type="html"><![CDATA[<h1 id="CI-CD"><a href="#CI-CD" class="headerlink" title="CI&#x2F;CD"></a>CI&#x2F;CD</h1><h2 id="git基本操作"><a href="#git基本操作" class="headerlink" title="git基本操作"></a>git基本操作</h2><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs ini">git init                      //初始化 <br>git add main.cpp              //将某一个文件添加到暂存区 <br>git add .                     //将文件夹下的所有的文件添加到暂存区 <br>git commit -m ‘note‘          //将暂存区中的文件保存成为某一个版本 <br>git log                       //查看所有的版本日志 <br>git status                    //查看现在暂存区的状况 <br>git diff                      //查看现在文件与上一个提交-commit版本的区别 <br>git reset --hard HEAD^        //回到上一个版本 <br>git reset --hard XXXXX        //XXX为版本编号，回到某一个版本 <br>git pull origin master        //从主分支pull到本地 <br>git push -u origin master     //从本地push到主分支 <br>git pull                      //pull默认主分支 <br>git push                      //push默认主分支 ...<br>git checkout -b dev     // 创建dev分支，然后切换到dev分支<br>git checkout            // 命令加上-b参数表示创建并切换，相当于以下两条命令：<br>git branch dev git checkout dev<br>git branch              // 命令查看当前分支,<br>git branch              // 命令会列出所有分支，当前分支前面会标一个*号<br>git branch * dev   master<br>git add readme.txt git commit -m &quot;branch test&quot;  //  在dev分支上正常提交.<br></code></pre></td></tr></table></figure><h2 id="启动jenkins"><a href="#启动jenkins" class="headerlink" title="启动jenkins"></a>启动jenkins</h2><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini">nohup java -jar jenkins.war <span class="hljs-attr">--httpPort</span>=<span class="hljs-number">8080</span> &amp;nohup java -jar jenkins.war --httpPort=<span class="hljs-number">8080</span> &amp;<br></code></pre></td></tr></table></figure><h2 id="jenkins-maven"><a href="#jenkins-maven" class="headerlink" title="jenkins.maven"></a>jenkins.maven</h2><h2 id=""><a href="#" class="headerlink" title=""></a></h2><h3 id="需要在gitlab上放上jenkins的公钥以便jenkins可以拉取gitlab的仓库"><a href="#需要在gitlab上放上jenkins的公钥以便jenkins可以拉取gitlab的仓库" class="headerlink" title="需要在gitlab上放上jenkins的公钥以便jenkins可以拉取gitlab的仓库"></a>需要在gitlab上放上jenkins的公钥以便jenkins可以拉取gitlab的仓库</h3><p><img src="/images/image-20250323114548139.png" alt="image-20250323114548139"></p><h3 id="配置全局变量"><a href="#配置全局变量" class="headerlink" title="配置全局变量"></a>配置全局变量</h3><p><img src="/images/image-20250322220309535.png" alt="image-20250322220309535"></p><p>配置mvn  git  jdk环境 </p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ini">mvn -version<br>which git <br>which java    --&gt;&gt;   ll  /usr/bin/java<br></code></pre></td></tr></table></figure><h3 id="下载mvn插件能够让job构建一个maven项目"><a href="#下载mvn插件能够让job构建一个maven项目" class="headerlink" title="下载mvn插件能够让job构建一个maven项目"></a>下载mvn插件能够让job构建一个maven项目</h3><p><img src="/images/image-20250322220917348.png" alt="image-20250322220917348"></p><p><img src="/images/image-20250322222318167.png" alt="image-20250322222318167"></p><h3 id="执行docker远程主机命令需要下载插件Publish-Over-SSH"><a href="#执行docker远程主机命令需要下载插件Publish-Over-SSH" class="headerlink" title="执行docker远程主机命令需要下载插件Publish Over SSH"></a>执行docker远程主机命令需要下载插件Publish Over SSH</h3><p><img src="/images/image-20250322223005097.png" alt="image-20250322223005097"></p><h3 id="执行webhoob钩子需要下载插件Generic-Webhook-Trigger"><a href="#执行webhoob钩子需要下载插件Generic-Webhook-Trigger" class="headerlink" title="执行webhoob钩子需要下载插件Generic Webhook Trigger"></a>执行webhoob钩子需要下载插件Generic Webhook Trigger</h3><p><img src="/images/image-20250322222731099.png" alt="image-20250322222731099"></p><h4 id="需要在gitlab上配置-搭配webhook"><a href="#需要在gitlab上配置-搭配webhook" class="headerlink" title="需要在gitlab上配置 搭配webhook"></a>需要在gitlab上配置 搭配webhook</h4><p><img src="/images/image-20250322223110245.png" alt="image-20250322223110245"></p><p><img src="/images/image-20250322223331581.png" alt="image-20250322223331581"></p><h2 id="pipeline"><a href="#pipeline" class="headerlink" title="pipeline"></a>pipeline</h2><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs ini">pipeline &#123;<br>    agent any<br>    tools &#123;<br>        maven &quot;mvn&quot;   <span class="hljs-comment">##配置mvn环境 mvn是在配置变量里面写的名字</span><br>    &#125;<br>    stages &#123;<br>        stage(&#x27;拉取仓库&#x27;) &#123;<br>            steps &#123;<br>                git branch: &#x27;slave&#x27;, url: &#x27;git@192.168.85.131:ceshi/test.git&#x27;<br>                echo &#x27;拉取成功&#x27;<br>            &#125;<br>        &#125;<br>        <br>      stage(&#x27;mvn打包&#x27;) &#123;<br>         steps &#123;<br>            sh &#x27;&#x27;&#x27;cd /root/.jenkins/workspace/java-pipeline<br>               mvn clean package&#x27;&#x27;&#x27;<br>               echo &#x27;打包完成&#x27;<br>            &#125;<br>        &#125;<br>        stage(&#x27;docker执行&#x27;) &#123;<br>            steps &#123;<br>               sshPublisher(publishers: <span class="hljs-section">[sshPublisherDesc(configName: &#x27;docker-java&#x27;, transfers: [sshTransfer(cleanRemote: false, excludes: &#x27;&#x27;, execCommand: &#x27;&#x27;, execTimeout: 120000, flatten: false, makeEmptyDirs: false, noDefaultExcludes: false, patternSeparator: &#x27;[, ]</span>+&#x27;, remoteDirectory: &#x27;/root&#x27;, remoteDirectorySDF: false, removePrefix: &#x27;&#x27;, sourceFiles: &#x27;**/*.jar&#x27;), sshTransfer(cleanRemote: false, excludes: &#x27;&#x27;, execCommand: &#x27;&#x27;&#x27;cd /root/root<br><br>docker stop java <br>docker rm -f java<br>docker rmi java<br>docker build -t java .<br>docker run -d --name java -p 8081:8080 java&#x27;&#x27;&#x27;, execTimeout: 120000, flatten: false, makeEmptyDirs: false, noDefaultExcludes: false, patternSeparator: &#x27;<span class="hljs-section">[, ]</span>+&#x27;, remoteDirectory: &#x27;/root&#x27;, remoteDirectorySDF: false, removePrefix: &#x27;&#x27;, sourceFiles: &#x27;**/Dockerfile&#x27;)], usePromotionTimestamp: false, useWorkspaceInPromotion: false, verbose: false)])<br>                echo &#x27;执行成功&#x27;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="基于k8s流水线"><a href="#基于k8s流水线" class="headerlink" title="基于k8s流水线"></a>基于k8s流水线</h2><h3 id="需要让jenkins机器能够调用api"><a href="#需要让jenkins机器能够调用api" class="headerlink" title="需要让jenkins机器能够调用api"></a>需要让jenkins机器能够调用api</h3><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-comment"># scp ~/.kube/config  192.168.85.132:~/.kube/</span><br></code></pre></td></tr></table></figure><h3 id="gitlab的配置"><a href="#gitlab的配置" class="headerlink" title="gitlab的配置"></a>gitlab的配置</h3><p><img src="/images/1745056576872.png"></p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-comment"># cat k8s/deployment.yaml</span><br><br>apiVersion: apps/v1<br>kind: Deployment<br>metadata:<br>  name: &#123;&#123;PACKAGE_NAME&#125;&#125;<br>  namespace: &#123;&#123;K8S_NAMESPACE&#125;&#125;<br>spec:<br>  replicas: &#123;&#123;K8S_REPLICAS&#125;&#125;<br>  selector:<br>    matchLabels:<br>      app: &#123;&#123;PACKAGE_NAME&#125;&#125;<br>  template:<br>    metadata:<br>      labels:<br>        app: &#123;&#123;PACKAGE_NAME&#125;&#125;<br>    spec:<br>      containers:<br>        - name: &#123;&#123;PACKAGE_NAME&#125;&#125;<br>          image: &quot;&#123;&#123;IMAGE_NAME&#125;&#125;&quot;<br>          imagePullPolicy: Always<br>          ports:<br>            - containerPort: 8080<br><span class="hljs-comment"># cat Dockerfile </span><br>from openjdk<br>expose 8080<br>add ./target/simple-jar-project-1.0-SNAPSHOT.jar /root/<br>entrypoint <span class="hljs-section">[&quot;java&quot;,  &quot;-jar&quot;, &quot;/root/simple-jar-project-1.0-SNAPSHOT.jar&quot;]</span><br><br><span class="hljs-comment"># cat Jenkinsfile</span><br><br>pipeline &#123;<br>    agent any<br>    <br>    tools &#123;<br>        maven &#x27;mvn&#x27; <br>    &#125; <br>    parameters &#123;<br>        // GitLab 分支选择，允许用户选择需要部署的分支<br>        string(name: &#x27;GITLAB_BRANCH&#x27;, defaultValue: &#x27;slave&#x27;, description: &#x27;GitLab 分支名称&#x27;)<br><br>        // Java 包名字，允许用户自定义包名<br>        string(name: &#x27;PACKAGE_NAME&#x27;, defaultValue: &#x27;your-java-app&#x27;, description: &#x27;Java 包名字&#x27;)<br><br>        // 版本号，允许用户自定义<br>        string(name: &#x27;VERSION&#x27;, defaultValue: &#x27;1.0.0&#x27;, description: &#x27;Java 包版本号&#x27;)<br><br>        // 部署类型选择，用户选择 deploy 或 update<br>        choice(name: &#x27;DEPLOY_TYPE&#x27;, choices: <span class="hljs-section">[&#x27;deploy&#x27;, &#x27;update&#x27;]</span>, description: &#x27;选择部署或更新操作&#x27;)<br><br>        // Docker Registry，允许用户指定 Docker 镜像仓库<br>        string(name: &#x27;DOCKER_REGISTRY&#x27;, defaultValue: &#x27;192.168.85.128&#x27;, description: &#x27;Docker 镜像仓库地址&#x27;)<br><br>        // Kubernetes 部署命名空间，允许用户自定义<br>        string(name: &#x27;K8S_NAMESPACE&#x27;, defaultValue: &#x27;default&#x27;, description: &#x27;Kubernetes 命名空间&#x27;)<br><br>        // Kubernetes 部署副本数，用户可以自定义<br>        string(name: &#x27;K8S_REPLICAS&#x27;, defaultValue: &#x27;1&#x27;, description: &#x27;Kubernetes 部署副本数&#x27;)<br><br>        // 服务暴露端口，允许用户指定<br>        string(name: &#x27;SERVICE_PORT&#x27;, defaultValue: &#x27;8080&#x27;, description: &#x27;服务暴露端口&#x27;)<br><br>        // 自定义 Kubernetes 部署的其他信息，比如镜像仓库、标签等<br>        string(name: &#x27;K8S_DEPLOYMENT_FILE&#x27;, defaultValue: &#x27;k8s/deployment.yaml&#x27;, description: &#x27;Kubernetes 部署文件路径&#x27;)<br>    &#125;<br><br>    environment &#123;<br>        // 构建 Docker 镜像标签<br>        <span class="hljs-attr">IMAGE_NAME</span> = <span class="hljs-string">&quot;$&#123;params.DOCKER_REGISTRY&#125;/nb/$&#123;params.PACKAGE_NAME&#125;:$&#123;params.VERSION&#125;&quot;</span><br>        // Kubernetes 配置文件临时路径<br>        <span class="hljs-attr">K8S_TEMP_FILE</span> = <span class="hljs-string">&quot;$&#123;WORKSPACE&#125;/k8s-deployment-temp.yaml&quot;</span><br>    &#125;<br><br>    stages &#123;<br>        stage(&#x27;检出代码&#x27;) &#123;<br>            steps &#123;<br>                script &#123;<br>                    echo &quot;正在从 GitLab 拉取分支 $&#123;params.GITLAB_BRANCH&#125; 的代码...&quot;<br>                    git branch: &quot;$&#123;params.GITLAB_BRANCH&#125;&quot;, url: &#x27;git@192.168.85.131:ceshi/test.git&#x27;<br>                &#125;<br>            &#125;<br>        &#125;<br><br>        stage(&#x27;构建 Java 应用&#x27;) &#123;<br>            steps &#123;<br>                script &#123;<br>                    echo &quot;正在构建 Java 包 $&#123;params.PACKAGE_NAME&#125; 版本 $&#123;params.VERSION&#125;...&quot;<br>                    sh &quot;pwd &amp;&amp; /usr/local/apache-maven-3.8.8/bin/mvn clean package -DskipTests <span class="hljs-attr">-DartifactId</span>=<span class="hljs-variable">$&#123;params.PACKAGE_NAME&#125;</span> -Dversion=<span class="hljs-variable">$&#123;params.VERSION&#125;</span><span class="hljs-string">&quot;</span><br><span class="hljs-string">                &#125;</span><br><span class="hljs-string">            &#125;</span><br><span class="hljs-string">        &#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string">        stage(&#x27;构建 Docker 镜像&#x27;) &#123;</span><br><span class="hljs-string">            steps &#123;</span><br><span class="hljs-string">                script &#123;</span><br><span class="hljs-string">                    echo &quot;</span>正在构建 Docker 镜像 <span class="hljs-variable">$&#123;env.IMAGE_NAME&#125;</span>...<span class="hljs-string">&quot;</span><br><span class="hljs-string">                    sh &quot;</span>docker build -t <span class="hljs-variable">$&#123;env.IMAGE_NAME&#125;</span> .<span class="hljs-string">&quot;</span><br><span class="hljs-string">                &#125;</span><br><span class="hljs-string">            &#125;</span><br><span class="hljs-string">        &#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string">        stage(&#x27;推送 Docker 镜像到镜像仓库&#x27;) &#123;</span><br><span class="hljs-string">            steps &#123;</span><br><span class="hljs-string">                script &#123;</span><br><span class="hljs-string">                    echo &quot;</span>正在将 Docker 镜像 <span class="hljs-variable">$&#123;env.IMAGE_NAME&#125;</span> 推送到 <span class="hljs-variable">$&#123;params.DOCKER_REGISTRY&#125;</span>...<span class="hljs-string">&quot;</span><br><span class="hljs-string">                    sh &quot;</span>docker push <span class="hljs-variable">$&#123;env.IMAGE_NAME&#125;</span><span class="hljs-string">&quot;</span><br><span class="hljs-string">                &#125;</span><br><span class="hljs-string">            &#125;</span><br><span class="hljs-string">        &#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string">        stage(&#x27;生成动态 Kubernetes 部署文件&#x27;) &#123;</span><br><span class="hljs-string">            steps &#123;</span><br><span class="hljs-string">                script &#123;</span><br><span class="hljs-string">                    // 替换 Kubernetes 部署模板中的变量</span><br><span class="hljs-string">                    echo &quot;</span>正在生成动态的 Kubernetes 部署文件...<span class="hljs-string">&quot;</span><br><span class="hljs-string"></span><br><span class="hljs-string">                    // 读取 Kubernetes 部署模板</span><br><span class="hljs-string">                    def yamlTemplate = readFile(&quot;</span><span class="hljs-variable">$&#123;params.K8S_DEPLOYMENT_FILE&#125;</span><span class="hljs-string">&quot;)</span><br><span class="hljs-string"></span><br><span class="hljs-string">                    // 使用 Groovy 的字符串替换功能，替换变量</span><br><span class="hljs-string">                    def modifiedYaml = yamlTemplate.replace(&quot;</span>&#123;&#123;IMAGE_NAME&#125;&#125;<span class="hljs-string">&quot;, env.IMAGE_NAME)</span><br><span class="hljs-string">                                                  .replace(&quot;</span>&#123;&#123;K8S_NAMESPACE&#125;&#125;<span class="hljs-string">&quot;, params.K8S_NAMESPACE)</span><br><span class="hljs-string">                                                  .replace(&quot;</span>&#123;&#123;K8S_REPLICAS&#125;&#125;<span class="hljs-string">&quot;, params.K8S_REPLICAS)</span><br><span class="hljs-string">                                                  .replace(&quot;</span>&#123;&#123;PACKAGE_NAME&#125;&#125;<span class="hljs-string">&quot;, params.PACKAGE_NAME)</span><br><span class="hljs-string"></span><br><span class="hljs-string">                    // 写入临时文件</span><br><span class="hljs-string">                    writeFile file: env.K8S_TEMP_FILE, text: modifiedYaml</span><br><span class="hljs-string"></span><br><span class="hljs-string">                    echo &quot;</span>生成的 Kubernetes 部署文件路径: <span class="hljs-variable">$&#123;env.K8S_TEMP_FILE&#125;</span><span class="hljs-string">&quot;</span><br><span class="hljs-string">                &#125;</span><br><span class="hljs-string">            &#125;</span><br><span class="hljs-string">        &#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string">        stage(&#x27;在 Kubernetes 上部署或更新&#x27;) &#123;</span><br><span class="hljs-string">            steps &#123;</span><br><span class="hljs-string">                script &#123;</span><br><span class="hljs-string">                    echo &quot;</span>正在执行 Kubernetes 部署或更新...<span class="hljs-string">&quot;</span><br><span class="hljs-string">                    </span><br><span class="hljs-string">                    // 根据部署类型选择执行的操作</span><br><span class="hljs-string">                    if (params.DEPLOY_TYPE == &#x27;deploy&#x27;) &#123;</span><br><span class="hljs-string">                        echo &quot;</span>正在将 <span class="hljs-variable">$&#123;params.PACKAGE_NAME&#125;</span> 版本 <span class="hljs-variable">$&#123;params.VERSION&#125;</span> 部署到 Kubernetes 命名空间 <span class="hljs-variable">$&#123;params.K8S_NAMESPACE&#125;</span>...<span class="hljs-string">&quot;</span><br><span class="hljs-string">                        // 执行 Kubernetes 部署，使用自定义的副本数和命名空间</span><br><span class="hljs-string">                        sh &quot;</span><span class="hljs-string">&quot;&quot;</span><br>                            kubectl apply -f $&#123;env.K8S_TEMP_FILE&#125; \<br>                            <span class="hljs-attr">--namespace</span>=<span class="hljs-variable">$&#123;params.K8S_NAMESPACE&#125;</span><br>                        &quot;&quot;&quot;<br>                    &#125; else if (<span class="hljs-attr">params.DEPLOY_TYPE</span> == <span class="hljs-string">&#x27;update&#x27;</span>) &#123;<br>                        echo &quot;正在更新 Kubernetes 中的 $&#123;params.PACKAGE_NAME&#125; 版本 $&#123;params.VERSION&#125;...&quot;<br>                        // 更新 Kubernetes 部署镜像<br>                        // 更新副本数<br>                        sh &quot;&quot;&quot;<br>                            <span class="hljs-comment">#  kubectl set image deployment/$&#123;params.PACKAGE_NAME&#125; \</span><br>                            <span class="hljs-comment"># $&#123;params.PACKAGE_NAME&#125;=$&#123;env.IMAGE_NAME&#125; \</span><br>                            <span class="hljs-comment"># --namespace=$&#123;params.K8S_NAMESPACE&#125; --record \</span><br>                            <span class="hljs-comment"># &amp;&amp; \</span><br>                            <span class="hljs-comment"># kubectl scale deployment $&#123;params.PACKAGE_NAME&#125; \</span><br>                            <span class="hljs-comment"># --replicas=$&#123;params.K8S_REPLICAS&#125; \</span><br>                            <span class="hljs-comment"># --namespace=$&#123;params.K8S_NAMESPACE&#125; --record 这样是分别记录 但是会有两个吧N本</span><br>                            kubectl apply -f  $&#123;env.K8S_TEMP_FILE&#125; <span class="hljs-attr">--namespace</span>=<span class="hljs-variable">$&#123;params.K8S_NAMESPACE&#125;</span><br>                          &quot;&quot;&quot;<br><br>                    &#125; else &#123;<br>                        error &quot;未知的部署类型: $&#123;params.DEPLOY_TYPE&#125;&quot;<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br>        stage(&#x27;创建 Kubernetes Service&#x27;) &#123;<br>            steps &#123;<br>                script &#123;<br>                    echo &quot;正在创建 Kubernetes 服务 $&#123;params.PACKAGE_NAME&#125;...&quot;<br>                    // 创建 Kubernetes 服务，将容器端口暴露出来<br>                    if (<span class="hljs-attr">params.DEPLOY_TYPE</span> == <span class="hljs-string">&#x27;deploy&#x27;</span>) &#123;<br>                    sh &quot;&quot;&quot;<br>                        kubectl expose deployment $&#123;params.PACKAGE_NAME&#125; \<br>                        <span class="hljs-attr">--type</span>=NodePort \<br>                        <span class="hljs-attr">--name</span>=<span class="hljs-variable">$&#123;params.PACKAGE_NAME&#125;</span>-svc \<br>                        <span class="hljs-attr">--port</span>=<span class="hljs-variable">$&#123;params.SERVICE_PORT&#125;</span> \<br>                        <span class="hljs-attr">--target-port</span>=<span class="hljs-number">8080</span> \<br>                        <span class="hljs-attr">--namespace</span>=<span class="hljs-variable">$&#123;params.K8S_NAMESPACE&#125;</span><br>                    &quot;&quot;&quot;<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    post &#123;<br>        success &#123;<br>            echo &quot;流水线执行成功！&quot;<br>        &#125;<br>        failure &#123;<br>            echo &quot;流水线执行失败！&quot;<br>        &#125;<br>    &#125;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><h3 id="1-在gitlab修改java代码"><a href="#1-在gitlab修改java代码" class="headerlink" title="1.在gitlab修改java代码"></a>1.在gitlab修改java代码</h3><p><img src="/images/image-20250506190019992.png" alt="image-20250506190019992"></p><h3 id="2-在jenkins构建"><a href="#2-在jenkins构建" class="headerlink" title="2.在jenkins构建"></a>2.在jenkins构建</h3><p><img src="/images/image-20250506190530570.png" alt="image-20250506190530570"></p><p><img src="/images/image-20250506190610011.png" alt="image-20250506190610011"></p><p>就是把变量赋值到gitlab 的 k8s&#x2F;deployment.yaml下  然后 写入到jenkins机器上 writeFile file: env.K8S_TEMP_FILE, text: modifiedYaml</p><h3 id="3-构建"><a href="#3-构建" class="headerlink" title="3.构建"></a>3.构建</h3><p><img src="/images/image-20250506191617139.png" alt="image-20250506191617139"></p><p>有红的也不用慌 控制台有报错原因 找找原因即可</p><p>再看下k8s机器  pod有两个容器因为里面我注入了sidecar</p><p><img src="/images/image-20250506191806352.png" alt="image-20250506191806352"></p><p><img src="/images/image-20250506191835889.png" alt="image-20250506191835889"></p>]]></content>
    
    
    <categories>
      
      <category>自动化运维</category>
      
    </categories>
    
    
    <tags>
      
      <tag>自动化运维</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
